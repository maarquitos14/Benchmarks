typedef long int ptrdiff_t;
typedef unsigned long int size_t;
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
typedef long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long int uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;
typedef unsigned long int uintptr_t;
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
struct  nanos_region_dimension_internal_t
{
    ::size_t size;
    ::size_t lower_bound;
    ::size_t accessed_length;
};
struct  nanos_access_type_internal_t
{
    bool input:1;
    bool output:1;
    bool can_rename:1;
    bool concurrent:1;
    bool commutative:1;
};
struct  nanos_data_access_internal_t
{
    void *address;
    ::nanos_access_type_internal_t flags;
    short int dimension_count;
    const ::nanos_region_dimension_internal_t *dimensions;
    ::ptrdiff_t offset;
};
enum nanos_sharing_t
{
  NANOS_PRIVATE = 0,
  NANOS_SHARED = 1
};
struct  nanos_reduction_t
{
    void *original;
    void *privates;
    ::size_t element_size;
    ::size_t num_scalars;
    void *descriptor;
    void (*bop)(void *, void *, int);
    void (*vop)(int, void *, void *);
    void (*cleanup)(void *);
};
typedef unsigned int memory_space_id_t;
struct  nanos_copy_data_internal_t
{
    void *address;
    ::nanos_sharing_t sharing;
    struct  mcc_struct_anon_5
    {
        bool input:1;
        bool output:1;
    };
    ::nanos_copy_data_internal_t::mcc_struct_anon_5 flags;
    short int dimension_count;
    ::nanos_region_dimension_internal_t *dimensions;
    ::ptrdiff_t offset;
    ::uint64_t host_base_address;
    ::memory_space_id_t host_region_id;
    bool remote_host;
};
typedef ::nanos_access_type_internal_t nanos_access_type_t;
typedef ::nanos_region_dimension_internal_t nanos_region_dimension_t;
typedef ::nanos_data_access_internal_t nanos_data_access_t;
typedef ::nanos_copy_data_internal_t nanos_copy_data_t;
typedef void *nanos_thread_t;
typedef void *nanos_wd_t;
struct  nanos_compound_wd_data_t
{
    int nsect;
    ::nanos_wd_t lwd[];
};
struct  nanos_repeat_n_info_t
{
    int n;
};
struct  nanos_loop_info_t
{
    int lower;
    int upper;
    int step;
    bool last;
    bool wait;
    int chunk;
    int stride;
    int thid;
    int threads;
    void *args;
};
typedef void *nanos_ws_t;
typedef void *nanos_ws_info_t;
typedef void *nanos_ws_data_t;
typedef void *nanos_ws_item_t;
struct  nanos_ws_info_loop_t
{
    int lower_bound;
    int upper_bound;
    int loop_step;
    int chunk_size;
};
struct  nanos_ws_item_loop_t
{
    int lower;
    int upper;
    bool execute:1;
    bool last:1;
};
struct nanos_ws_desc;
struct  nanos_ws_desc
{
    volatile ::nanos_ws_t ws;
    ::nanos_ws_data_t data;
    ::nanos_ws_desc *next;
    ::nanos_thread_t *threads;
    int nths;
};
typedef ::nanos_ws_desc nanos_ws_desc_t;
struct  nanos_wd_props_t
{
    bool mandatory_creation:1;
    bool tied:1;
    bool clear_chunk:1;
    bool reserved0:1;
    bool reserved1:1;
    bool reserved2:1;
    bool reserved3:1;
    bool reserved4:1;
};
struct  nanos_wd_dyn_flags_t
{
    bool is_final:1;
    bool is_recover:1;
    bool reserved2:1;
    bool reserved3:1;
    bool reserved4:1;
    bool reserved5:1;
    bool reserved6:1;
    bool reserved7:1;
};
struct  nanos_wd_memo_info_t
{
    int num_elements;
    void *identifier;
};
struct  nanos_wd_dyn_props_t
{
    ::nanos_wd_dyn_flags_t flags;
    ::nanos_thread_t tie_to;
    int priority;
    ::nanos_wd_memo_info_t memo;
};
struct  nanos_device_t
{
    void *(*factory)(void *);
    void *arg;
};
struct  nanos_smp_args_t
{
    void (*outline)(void *);
};
extern "C"
{
  extern void *nanos_smp_factory_(void *args);
}
extern "C"
{
  extern void *nanos_smp_factory(void *args);
}
enum nanos_event_type_t
{
  NANOS_STATE_START = 0,
  NANOS_STATE_END = 1,
  NANOS_SUBSTATE_START = 2,
  NANOS_SUBSTATE_END = 3,
  NANOS_BURST_START = 4,
  NANOS_BURST_END = 5,
  NANOS_PTP_START = 6,
  NANOS_PTP_END = 7,
  NANOS_POINT = 8,
  EVENT_TYPES = 9
};
typedef unsigned int nanos_event_key_t;
typedef unsigned long long int nanos_event_value_t;
enum nanos_event_state_value_t
{
  NANOS_NOT_CREATED = 0,
  NANOS_NOT_RUNNING = 1,
  NANOS_STARTUP = 2,
  NANOS_SHUTDOWN = 3,
  NANOS_ERROR = 4,
  NANOS_IDLE = 5,
  NANOS_RUNTIME = 6,
  NANOS_RUNNING = 7,
  NANOS_SYNCHRONIZATION = 8,
  NANOS_SCHEDULING = 9,
  NANOS_CREATION = 10,
  NANOS_MEM_TRANSFER_IN = 11,
  NANOS_MEM_TRANSFER_OUT = 12,
  NANOS_MEM_TRANSFER_LOCAL = 13,
  NANOS_MEM_TRANSFER_DEVICE_IN = 14,
  NANOS_MEM_TRANSFER_DEVICE_OUT = 15,
  NANOS_MEM_TRANSFER_DEVICE_LOCAL = 16,
  NANOS_CACHE = 17,
  NANOS_YIELD = 18,
  NANOS_ACQUIRING_LOCK = 19,
  NANOS_CONTEXT_SWITCH = 20,
  NANOS_DEBUG = 21,
  NANOS_EVENT_STATE_TYPES = 22
};
enum nanos_event_domain_t
{
  NANOS_WD_DOMAIN = 0,
  NANOS_WD_DEPENDENCY = 1,
  NANOS_WAIT = 2,
  NANOS_XFER_DATA = 3,
  NANOS_XFER_REQ = 4,
  NANOS_WD_REMOTE = 5,
  NANOS_AM_WORK = 6,
  NANOS_AM_WORK_DONE = 7,
  NANOS_XFER_WAIT_REQ_PUT = 8,
  NANOS_XFER_FREE_TMP_BUFF = 9
};
typedef long long int nanos_event_id_t;
struct  nanos_event_t
{
    ::nanos_event_type_t type;
    ::nanos_event_key_t key;
    ::nanos_event_value_t value;
    ::nanos_event_domain_t domain;
    ::nanos_event_id_t id;
};
enum nanos_lock_state_t
{
  NANOS_LOCK_FREE = 0,
  NANOS_LOCK_BUSY = 1
};
struct  nanos_lock_t
{
    volatile ::nanos_lock_state_t state_;
    inline nanos_lock_t(::nanos_lock_state_t init  = (::NANOS_LOCK_FREE))
      : state_(init)
    {
    }
};
typedef void (*nanos_translate_args_t)(void *, ::nanos_wd_t);
typedef void nanos_init_func_t(void *);
struct  nanos_init_desc_t
{
    ::nanos_init_func_t (*func);
    void *data;
};
enum nanos_err_t
{
  NANOS_OK = 0,
  NANOS_UNKNOWN_ERR = 1,
  NANOS_UNIMPLEMENTED = 2,
  NANOS_ENOMEM = 3,
  NANOS_INVALID_PARAM = 4
};
typedef void *nanos_wg_t;
typedef void *nanos_team_t;
typedef void *nanos_sched_t;
typedef void *nanos_slicer_t;
typedef void *nanos_dd_t;
typedef void *nanos_sync_cond_t;
typedef unsigned int nanos_copy_id_t;
struct  nanos_const_wd_definition_tag
{
    ::nanos_wd_props_t props;
    ::size_t data_alignment;
    ::size_t num_copies;
    ::size_t num_devices;
    ::size_t num_dimensions;
    const char *description;
};
typedef ::nanos_const_wd_definition_tag nanos_const_wd_definition_t;
struct  nanos_const_wd_definition_1
{
    ::nanos_const_wd_definition_t base;
    ::nanos_device_t devices[1];
};
struct  nanos_constraint_t
{
    int nthreads;
    void *arch;
};
struct  nanos_const_wd_definition_internal_t : ::nanos_const_wd_definition_tag
{
    ::nanos_device_t devices[1];
};
extern "C"
{
  extern char *nanos_get_mode_();
}
extern "C"
{
  extern char *nanos_get_mode();
}
extern "C"
{
  extern ::nanos_wd_t nanos_current_wd_();
}
extern "C"
{
  extern ::nanos_wd_t nanos_current_wd();
}
extern "C"
{
  extern void *  nanos_memo_get_map(::nanos_wd_t wd, void * id);
}
extern "C"
{
  extern void *  nanos_memo_get_map(::nanos_wd_t wd, void * id);
}
extern "C"
{
  extern int nanos_get_wd_id_(::nanos_wd_t wd);
}
extern "C"
{
  extern int nanos_get_wd_id(::nanos_wd_t wd);
}
extern "C"
{
  extern int nanos_get_wd_priority_(::nanos_wd_t wd);
}
extern "C"
{
  extern int nanos_get_wd_priority(::nanos_wd_t wd);
}
extern "C"
{
  extern void nanos_set_wd_priority_(::nanos_wd_t wd, int p);
}
extern "C"
{
  extern void nanos_set_wd_priority(::nanos_wd_t wd, int p);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_wd_description_(char **description, ::nanos_wd_t wd);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_wd_description(char **description, ::nanos_wd_t wd);
}
extern "C"
{
  extern ::nanos_slicer_t nanos_find_slicer_(const char *slicer);
}
extern "C"
{
  extern ::nanos_slicer_t nanos_find_slicer(const char *slicer);
}
extern "C"
{
  extern ::nanos_ws_t nanos_find_worksharing_(const char *label);
}
extern "C"
{
  extern ::nanos_ws_t nanos_find_worksharing(const char *label);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_wd_compact_(::nanos_wd_t *wd, ::nanos_const_wd_definition_t *const_data, ::nanos_wd_dyn_props_t *dyn_props, ::size_t data_size, void **data, ::nanos_wg_t wg, ::nanos_copy_data_t **copies, ::nanos_region_dimension_internal_t **dimensions);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_wd_compact(::nanos_wd_t *wd, ::nanos_const_wd_definition_t *const_data, ::nanos_wd_dyn_props_t *dyn_props, ::size_t data_size, void **data, ::nanos_wg_t wg, ::nanos_copy_data_t **copies, ::nanos_region_dimension_internal_t **dimensions);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_translate_function_(::nanos_wd_t wd, ::nanos_translate_args_t translate_args);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_translate_function(::nanos_wd_t wd, ::nanos_translate_args_t translate_args);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_sliced_wd_(::nanos_wd_t *uwd, ::size_t num_devices, ::nanos_device_t *devices, ::size_t outline_data_size, int outline_data_align, void **outline_data, ::nanos_wg_t uwg, ::nanos_slicer_t slicer, ::nanos_wd_props_t *props, ::nanos_wd_dyn_props_t *dyn_props, ::size_t num_copies, ::nanos_copy_data_t **copies, ::size_t num_dimensions, ::nanos_region_dimension_internal_t **dimensions);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_sliced_wd(::nanos_wd_t *uwd, ::size_t num_devices, ::nanos_device_t *devices, ::size_t outline_data_size, int outline_data_align, void **outline_data, ::nanos_wg_t uwg, ::nanos_slicer_t slicer, ::nanos_wd_props_t *props, ::nanos_wd_dyn_props_t *dyn_props, ::size_t num_copies, ::nanos_copy_data_t **copies, ::size_t num_dimensions, ::nanos_region_dimension_internal_t **dimensions);
}
extern "C"
{
  extern ::nanos_err_t nanos_submit_(::nanos_wd_t wd, ::size_t num_data_accesses, ::nanos_data_access_t *data_accesses, ::nanos_team_t team);
}
extern "C"
{
  extern ::nanos_err_t nanos_submit(::nanos_wd_t wd, ::size_t num_data_accesses, ::nanos_data_access_t *data_accesses, ::nanos_team_t team);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_wd_and_run_compact_(::nanos_const_wd_definition_t *const_data, ::nanos_wd_dyn_props_t *dyn_props, ::size_t data_size, void *data, ::size_t num_data_accesses, ::nanos_data_access_t *data_accesses, ::nanos_copy_data_t *copies, ::nanos_region_dimension_internal_t *dimensions, ::nanos_translate_args_t translate_args);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_wd_and_run_compact(::nanos_const_wd_definition_t *const_data, ::nanos_wd_dyn_props_t *dyn_props, ::size_t data_size, void *data, ::size_t num_data_accesses, ::nanos_data_access_t *data_accesses, ::nanos_copy_data_t *copies, ::nanos_region_dimension_internal_t *dimensions, ::nanos_translate_args_t translate_args);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_for_();
}
extern "C"
{
  extern ::nanos_err_t nanos_create_for();
}
extern "C"
{
  extern ::nanos_err_t nanos_set_internal_wd_data_(::nanos_wd_t wd, void *data);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_internal_wd_data(::nanos_wd_t wd, void *data);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_internal_wd_data_(::nanos_wd_t wd, void **data);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_internal_wd_data(::nanos_wd_t wd, void **data);
}
extern "C"
{
  extern ::nanos_err_t nanos_yield_();
}
extern "C"
{
  extern ::nanos_err_t nanos_yield();
}
extern "C"
{
  extern ::nanos_err_t nanos_slicer_get_specific_data_(::nanos_slicer_t slicer, void **data);
}
extern "C"
{
  extern ::nanos_err_t nanos_slicer_get_specific_data(::nanos_slicer_t slicer, void **data);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_ready_tasks_(unsigned int *ready_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_ready_tasks(unsigned int *ready_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_total_tasks_(unsigned int *total_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_total_tasks(unsigned int *total_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_nonready_tasks_(unsigned int *nonready_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_nonready_tasks(unsigned int *nonready_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_running_tasks_(unsigned int *running_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_running_tasks(unsigned int *running_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_blocked_tasks_(unsigned int *blocked_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_blocked_tasks(unsigned int *blocked_tasks);
}
extern "C"
{
  extern ::nanos_err_t nanos_in_final_(bool *result);
}
extern "C"
{
  extern ::nanos_err_t nanos_in_final(bool *result);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_final_(bool value);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_final(bool value);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_team_(::nanos_team_t *team, ::nanos_sched_t sg, unsigned int *nthreads, ::nanos_constraint_t *constraints, bool reuse, ::nanos_thread_t *info, ::nanos_const_wd_definition_t *const_data);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_team(::nanos_team_t *team, ::nanos_sched_t sg, unsigned int *nthreads, ::nanos_constraint_t *constraints, bool reuse, ::nanos_thread_t *info, ::nanos_const_wd_definition_t *const_data);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_team_mapped_(::nanos_team_t *team, ::nanos_sched_t sg, unsigned int *nthreads, unsigned int *mapping);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_team_mapped(::nanos_team_t *team, ::nanos_sched_t sg, unsigned int *nthreads, unsigned int *mapping);
}
extern "C"
{
  extern ::nanos_err_t nanos_enter_team_();
}
extern "C"
{
  extern ::nanos_err_t nanos_enter_team();
}
extern "C"
{
  extern ::nanos_err_t nanos_leave_team_();
}
extern "C"
{
  extern ::nanos_err_t nanos_leave_team();
}
extern "C"
{
  extern ::nanos_err_t nanos_end_team_(::nanos_team_t team);
}
extern "C"
{
  extern ::nanos_err_t nanos_end_team(::nanos_team_t team);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_barrier_();
}
extern "C"
{
  extern ::nanos_err_t nanos_team_barrier();
}
extern "C"
{
  extern ::nanos_err_t nanos_single_guard_(bool *);
}
extern "C"
{
  extern ::nanos_err_t nanos_single_guard(bool *);
}
extern "C"
{
  extern ::nanos_err_t nanos_enter_sync_init_(bool *b);
}
extern "C"
{
  extern ::nanos_err_t nanos_enter_sync_init(bool *b);
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_sync_init_();
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_sync_init();
}
extern "C"
{
  extern ::nanos_err_t nanos_release_sync_init_();
}
extern "C"
{
  extern ::nanos_err_t nanos_release_sync_init();
}
extern "C"
{
  extern ::nanos_err_t nanos_memory_fence_();
}
extern "C"
{
  extern ::nanos_err_t nanos_memory_fence();
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_num_starring_threads_FIXME_(int *n);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_num_starring_threads_FIXME(int *n);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_starring_threads_FIXME_(int *n, ::nanos_thread_t *list_of_threads);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_starring_threads_FIXME(int *n, ::nanos_thread_t *list_of_threads);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_num_supporting_threads_(int *n);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_num_supporting_threads(int *n);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_supporting_threads_(int *n, ::nanos_thread_t *list_of_threads);
}
extern "C"
{
  extern ::nanos_err_t nanos_team_get_supporting_threads(int *n, ::nanos_thread_t *list_of_threads);
}
extern "C"
{
  extern ::nanos_err_t nanos_register_reduction_(::nanos_reduction_t *red);
}
extern "C"
{
  extern ::nanos_err_t nanos_register_reduction(::nanos_reduction_t *red);
}
extern "C"
{
  extern ::nanos_err_t nanos_reduction_get_private_data_(void **copy, void *original);
}
extern "C"
{
  extern ::nanos_err_t nanos_reduction_get_private_data(void **copy, void *original);
}
extern "C"
{
  extern ::nanos_err_t nanos_reduction_get_(::nanos_reduction_t **dest, void *original);
}
extern "C"
{
  extern ::nanos_err_t nanos_reduction_get(::nanos_reduction_t **dest, void *original);
}
extern "C"
{
  extern ::nanos_err_t nanos_admit_current_thread_();
}
extern "C"
{
  extern ::nanos_err_t nanos_admit_current_thread();
}
extern "C"
{
  extern ::nanos_err_t nanos_expel_current_thread_();
}
extern "C"
{
  extern ::nanos_err_t nanos_expel_current_thread();
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_release_all_();
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_release_all();
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_pendant_writes_(bool *res, void *addr);
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_pendant_writes(bool *res, void *addr);
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_create_(::nanos_wd_t pred, ::nanos_wd_t succ);
}
extern "C"
{
  extern ::nanos_err_t nanos_dependence_create(::nanos_wd_t pred, ::nanos_wd_t succ);
}
extern "C"
{
  extern ::nanos_err_t nanos_worksharing_create_(::nanos_ws_desc_t **wsd, ::nanos_ws_t ws, ::nanos_ws_info_t *info, bool *b);
}
extern "C"
{
  extern ::nanos_err_t nanos_worksharing_create(::nanos_ws_desc_t **wsd, ::nanos_ws_t ws, ::nanos_ws_info_t *info, bool *b);
}
extern "C"
{
  extern ::nanos_err_t nanos_worksharing_next_item_(::nanos_ws_desc_t *wsd, ::nanos_ws_item_t *wsi);
}
extern "C"
{
  extern ::nanos_err_t nanos_worksharing_next_item(::nanos_ws_desc_t *wsd, ::nanos_ws_item_t *wsi);
}
extern "C"
{
  extern ::nanos_err_t nanos_wg_wait_completion_(::nanos_wg_t wg, bool avoid_flush);
}
extern "C"
{
  extern ::nanos_err_t nanos_wg_wait_completion(::nanos_wg_t wg, bool avoid_flush);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_int_sync_cond_(::nanos_sync_cond_t *sync_cond, volatile int *p, int condition);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_int_sync_cond(::nanos_sync_cond_t *sync_cond, volatile int *p, int condition);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_bool_sync_cond_(::nanos_sync_cond_t *sync_cond, volatile bool *p, bool condition);
}
extern "C"
{
  extern ::nanos_err_t nanos_create_bool_sync_cond(::nanos_sync_cond_t *sync_cond, volatile bool *p, bool condition);
}
extern "C"
{
  extern ::nanos_err_t nanos_sync_cond_wait_(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_sync_cond_wait(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_sync_cond_signal_(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_sync_cond_signal(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_destroy_sync_cond_(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_destroy_sync_cond(::nanos_sync_cond_t sync_cond);
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_on_(::size_t num_data_accesses, ::nanos_data_access_t *data_accesses);
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_on(::size_t num_data_accesses, ::nanos_data_access_t *data_accesses);
}
extern "C"
{
  extern ::nanos_err_t nanos_init_lock_(::nanos_lock_t **lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_init_lock(::nanos_lock_t **lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_init_lock_at_(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_init_lock_at(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_lock_(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_lock(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_unset_lock_(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_unset_lock(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_try_lock_(::nanos_lock_t *lock, bool *result);
}
extern "C"
{
  extern ::nanos_err_t nanos_try_lock(::nanos_lock_t *lock, bool *result);
}
extern "C"
{
  extern ::nanos_err_t nanos_destroy_lock_(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_destroy_lock(::nanos_lock_t *lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_lock_address_(void *addr, ::nanos_lock_t **lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_lock_address(void *addr, ::nanos_lock_t **lock);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_copies_(::nanos_wd_t wd, int num_copies, ::nanos_copy_data_t *copies);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_copies(::nanos_wd_t wd, int num_copies, ::nanos_copy_data_t *copies);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_addr_(::nanos_copy_id_t copy_id, void **addr, ::nanos_wd_t cwd);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_addr(::nanos_copy_id_t copy_id, void **addr, ::nanos_wd_t cwd);
}
extern "C"
{
  extern ::nanos_err_t nanos_copy_value_(void *dst, ::nanos_copy_id_t copy_id, ::nanos_wd_t cwd);
}
extern "C"
{
  extern ::nanos_err_t nanos_copy_value(void *dst, ::nanos_copy_id_t copy_id, ::nanos_wd_t cwd);
}
extern "C"
{
  extern const char *nanos_get_runtime_version_();
}
extern "C"
{
  extern const char *nanos_get_runtime_version();
}
extern "C"
{
  extern const char *nanos_get_default_architecture_();
}
extern "C"
{
  extern const char *nanos_get_default_architecture();
}
extern "C"
{
  extern const char *nanos_get_pm_();
}
extern "C"
{
  extern const char *nanos_get_pm();
}
extern "C"
{
  extern ::nanos_err_t nanos_get_default_binding_(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_default_binding(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_delay_start_();
}
extern "C"
{
  extern ::nanos_err_t nanos_delay_start();
}
extern "C"
{
  extern ::nanos_err_t nanos_start_();
}
extern "C"
{
  extern ::nanos_err_t nanos_start();
}
extern "C"
{
  extern ::nanos_err_t nanos_finish_();
}
extern "C"
{
  extern ::nanos_err_t nanos_finish();
}
extern "C"
{
  extern ::nanos_err_t nanos_current_socket_(int socket);
}
extern "C"
{
  extern ::nanos_err_t nanos_current_socket(int socket);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_sockets_(int *num_sockets);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_num_sockets(int *num_sockets);
}
extern "C"
{
  extern ::nanos_err_t nanos_malloc_(void **p, ::size_t size, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_malloc(void **p, ::size_t size, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_memalign_(void **p, ::size_t size, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_memalign(void **p, ::size_t size, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_cmalloc_(void **p, ::size_t size, unsigned int node, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_cmalloc(void **p, ::size_t size, unsigned int node, const char *file, int line);
}
extern "C"
{
  extern ::nanos_err_t nanos_stick_to_producer_(void *p, ::size_t size);
}
extern "C"
{
  extern ::nanos_err_t nanos_stick_to_producer(void *p, ::size_t size);
}
extern "C"
{
  extern ::nanos_err_t nanos_free_(void *p);
}
extern "C"
{
  extern ::nanos_err_t nanos_free(void *p);
}
extern "C"
{
  extern void nanos_free0_(void *p);
}
extern "C"
{
  extern void nanos_free0(void *p);
}
extern "C"
{
  extern void nanos_handle_error_(::nanos_err_t err);
}
extern "C"
{
  extern void nanos_handle_error(::nanos_err_t err);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_key_(::nanos_event_key_t *event_key, const char *key, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_key(::nanos_event_key_t *event_key, const char *key, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_value_(::nanos_event_value_t *event_value, const char *key, const char *value, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_value(::nanos_event_value_t *event_value, const char *key, const char *value, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_value_with_val_(::nanos_event_value_t val, const char *key, const char *value, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_register_value_with_val(::nanos_event_value_t val, const char *key, const char *value, const char *description, bool abort_when_registered);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_get_key_(const char *key, ::nanos_event_key_t *event_key);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_get_key(const char *key, ::nanos_event_key_t *event_key);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_get_value_(const char *key, const char *value, ::nanos_event_value_t *event_value);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_get_value(const char *key, const char *value, ::nanos_event_value_t *event_value);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_events_(unsigned int num_events, ::nanos_event_t events[]);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_events(unsigned int num_events, ::nanos_event_t events[]);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_close_user_fun_event_();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_close_user_fun_event();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_raise_gpu_kernel_launch_event_();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_raise_gpu_kernel_launch_event();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_close_gpu_kernel_launch_event_();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_close_gpu_kernel_launch_event();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_enable_();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_enable();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_disable_();
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_disable();
}
extern "C"
{
  extern ::nanos_err_t nanos_get_node_num_(unsigned int *num);
}
extern "C"
{
  extern ::nanos_err_t nanos_get_node_num(unsigned int *num);
}
extern "C"
{
  extern int nanos_get_num_nodes_();
}
extern "C"
{
  extern int nanos_get_num_nodes();
}
extern "C"
{
  extern ::nanos_err_t nanos_set_create_local_tasks_(bool value);
}
extern "C"
{
  extern ::nanos_err_t nanos_set_create_local_tasks(bool value);
}
extern "C"
{
  extern void *nanos_memo_get_map_(::nanos_wd_t wd, void *id);
}
extern "C"
{
  extern void *nanos_memo_get_map(::nanos_wd_t wd, void *id);
}
typedef const char *nanos_string_t;
extern "C"
{
  extern ::nanos_err_t nanos_instrument_begin_burst_(::nanos_string_t key, ::nanos_string_t key_descr, ::nanos_string_t value, ::nanos_string_t value_descr);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_begin_burst(::nanos_string_t key, ::nanos_string_t key_descr, ::nanos_string_t value, ::nanos_string_t value_descr);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_end_burst_(::nanos_string_t key, ::nanos_string_t value);
}
extern "C"
{
  extern ::nanos_err_t nanos_instrument_end_burst(::nanos_string_t key, ::nanos_string_t value);
}
extern "C"
{
  extern ::nanos_err_t nanos_memcpy_(void *dest, const void *src, ::size_t n);
}
extern "C"
{
  extern ::nanos_err_t nanos_memcpy(void *dest, const void *src, ::size_t n);
}
extern "C"
{
  extern ::nanos_err_t nanos_register_object_(int num_objects, ::nanos_copy_data_t *obj);
}
extern "C"
{
  extern ::nanos_err_t nanos_register_object(int num_objects, ::nanos_copy_data_t *obj);
}
extern "C"
{
  extern const char *nanos_get_default_scheduler_();
}
extern "C"
{
  extern const char *nanos_get_default_scheduler();
}
extern "C"
{
  extern ::nanos_err_t nanos_start_scheduler_();
}
extern "C"
{
  extern ::nanos_err_t nanos_start_scheduler();
}
extern "C"
{
  extern ::nanos_err_t nanos_stop_scheduler_();
}
extern "C"
{
  extern ::nanos_err_t nanos_stop_scheduler();
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_enabled_(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_enabled(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_until_threads_paused_();
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_until_threads_paused();
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_until_threads_unpaused_();
}
extern "C"
{
  extern ::nanos_err_t nanos_wait_until_threads_unpaused();
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_get_stealing_(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_get_stealing(bool *res);
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_set_stealing_(bool value);
}
extern "C"
{
  extern ::nanos_err_t nanos_scheduler_set_stealing(bool value);
}
extern "C"
{
  extern void ompss_nanox_main_();
}
extern "C"
{
  extern void ompss_nanox_main();
}
extern "C"
{
  void nanos_reduction_int_vop(int, void *, void *);
}
extern "C"
{
  void nanos_reduction_bop_add_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_cfloat(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_cfloat_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_cfloat(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_cfloat_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_cdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_cdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_cdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_cdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_clongdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_add_clongdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_clongdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_add_clongdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_cfloat(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_cfloat_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_cfloat(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_cfloat_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_cdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_cdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_cdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_cdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_clongdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_sub_clongdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_clongdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_sub_clongdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_cfloat(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_cfloat_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_cfloat(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_cfloat_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_cdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_cdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_cdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_cdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_clongdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_prod_clongdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_clongdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_prod_clongdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_and__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_and__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_or__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_or__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_xor__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_xor__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_cfloat(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_cfloat_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_cfloat(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_cfloat_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_cdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_cdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_cdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_cdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_clongdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_land_clongdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_clongdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_land_clongdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_cfloat(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_cfloat_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_cfloat(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_cfloat_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_cdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_cdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_cdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_cdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_clongdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_lor_clongdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_clongdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_lor_clongdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_max_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_max_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_char(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_char_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_char(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_char_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_uchar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_uchar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_uchar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_uchar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_schar(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_schar_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_schar(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_schar_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_short(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_short_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_short(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_short_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ushort(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ushort_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ushort(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ushort_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_int(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_int_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_int(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_int_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_uint(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_uint_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_uint(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_uint_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_long(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_long_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_long(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_long_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ulong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ulong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ulong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ulong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_longlong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_longlong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_longlong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_longlong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ulonglong(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_ulonglong_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ulonglong(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_ulonglong_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min__Bool(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min__Bool_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min__Bool(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min__Bool_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_float(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_float_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_float(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_float_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_double(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_double_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_double(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_double_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_longdouble(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_bop_min_longdouble_(void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_longdouble(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_vop_min_longdouble_(int i, void *arg1, void *arg2);
}
extern "C"
{
  void nanos_reduction_default_cleanup_char(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_uchar(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_schar(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_short(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_ushort(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_int(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_uint(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_long(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_ulong(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_longlong(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_ulonglong(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup__Bool(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_float(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_double(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_longdouble(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_cfloat(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_cdouble(void *r);
}
extern "C"
{
  void nanos_reduction_default_cleanup_clongdouble(void *r);
}
extern "C"
{
  extern void nanos_reduction_default_cleanup_fortran_(void *);
}
extern "C"
{
  extern void nanos_reduction_default_cleanup_fortran(void *);
}
extern "C"
{
  extern void nanos_atomic_assig_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_assig_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_assig_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_assig_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_assig_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_assig_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_assig_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_assig_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_assig_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_assig_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_assig_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_assig_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_assig_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_assig_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_assig_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_assig_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_assig_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_assig_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_assig_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_assig_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_assig_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_assig_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_assig_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_assig_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_assig_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_assig_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_assig_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_assig_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_assig_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_assig_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_assig_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_assig_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_assig_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_assig_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_assig_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_assig_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_assig_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_add_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_add_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_add_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_add_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_add_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_add_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_add_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_add_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_add_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_add_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_add_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_add_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_add_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_add_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_add_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_add_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_add_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_add_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_add_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_add_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_add_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_add_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_add_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_add_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_add_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_add_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_add_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_add_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_add_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_add_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_add_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_add_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_add_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_add_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_add_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_add_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_add_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_add_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_add_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_add_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_add_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_add_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_sub_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_sub_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_sub_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_sub_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_sub_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_sub_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_sub_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_sub_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_sub_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_sub_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_sub_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_sub_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_sub_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_sub_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_sub_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_sub_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_sub_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_sub_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_sub_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_sub_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_sub_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_sub_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_sub_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_sub_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_sub_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_sub_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_sub_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_sub_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_sub_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_sub_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_sub_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_sub_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_sub_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_sub_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_sub_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_sub_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_sub_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_mul_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mul_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mul_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mul_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mul_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mul_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mul_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mul_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mul_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_mul_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_mul_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_mul_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_mul_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_mul_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_mul_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_mul_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_mul_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mul_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mul_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mul_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mul_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mul_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mul_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mul_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mul_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mul_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_mul_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_mul_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_mul_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_mul_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_mul_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_mul_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_mul_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_mul_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_mul_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_mul_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_mul_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_div_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_div_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_div_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_div_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_div_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_div_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_div_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_div_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_div_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_div_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_div_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_div_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_div_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_div_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_div_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_div_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_div_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_div_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_div_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_div_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_div_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_div_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_div_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_div_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_div_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_div_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_div_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_div_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_div_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_div_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_div_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_div_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_div_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_div_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_div_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_div_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_div_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_div_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_div_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_div_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_div_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_div_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_pow_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_pow_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_pow_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_pow_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_pow_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_pow_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_pow_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_pow_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_pow_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_pow_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_pow_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_pow_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_pow_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_pow_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_pow_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_pow_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_pow_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_pow_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_pow_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_pow_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_pow_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_pow_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_pow_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_pow_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_pow_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_pow_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_pow_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_pow_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_pow_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_pow_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_pow_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_pow_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_pow_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_pow_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_pow_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_pow_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_pow_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_max_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_max_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_max_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_max_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_max_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_max_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_max_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_max_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_max_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_max_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_max_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_max_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_max_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_max_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_max_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_max_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_max_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_max_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_max_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_max_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_max_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_max_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_max_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_max_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_max_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_max_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_max_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_max_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_max_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_max_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_min_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_min_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_min_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_min_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_min_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_min_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_min_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_min_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_min_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_min_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_min_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_min_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_min_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_min_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_min_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_min_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_min_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_min_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_min_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_min_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_min_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_min_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_min_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_min_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_min_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_min_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_min_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_min_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_min_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_min_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_max_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_max_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_max_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_max_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_max_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_max_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_min_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_min_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_min_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_min_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_min_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_min_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_eq_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_eq_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_eq_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_eq_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_eq_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_eq_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_eq_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_eq_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_eq_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_eq_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_eq_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_eq_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_eq_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_eq_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_eq_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_eq_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_eq_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_eq_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_eq_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_eq_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_eq_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_eq_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_eq_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_eq_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_eq_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_eq_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_eq_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_eq_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_eq_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_eq_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_eq_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_eq_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_eq_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_eq_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_eq_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_eq_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_eq_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_neq_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_neq_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_neq_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_neq_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_neq_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_neq_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_neq_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_neq_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_neq_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_neq_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_neq_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_neq_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_neq_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_neq_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_neq_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_neq_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_neq_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_neq_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_neq_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_neq_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_neq_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_neq_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_neq_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_neq_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_neq_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_neq_float_(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_neq_float(volatile float *, float);
}
extern "C"
{
  extern void nanos_atomic_neq_double_(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_neq_double(volatile double *, double);
}
extern "C"
{
  extern void nanos_atomic_neq_ldouble_(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_neq_ldouble(volatile long double *, long double);
}
extern "C"
{
  extern void nanos_atomic_neq_cfloat_(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_neq_cfloat(volatile _Complex float *, _Complex float);
}
extern "C"
{
  extern void nanos_atomic_neq_cdouble_(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_neq_cdouble(volatile _Complex double *, _Complex double);
}
extern "C"
{
  extern void nanos_atomic_neq_cldouble_(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_neq_cldouble(volatile _Complex long double *, _Complex long double);
}
extern "C"
{
  extern void nanos_atomic_mod_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mod_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mod_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mod_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mod_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mod_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mod_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mod_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mod_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mod_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mod_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_mod_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_mod_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_mod_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_mod_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_mod_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_mod_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_mod_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_mod_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_mod_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_mod_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mod_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_mod_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mod_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_mod_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mod_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_mod_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mod_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_mod_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_mod_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shl_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shl_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shl_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shl_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shl_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shl_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shl_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shl_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_shl_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_shl_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_shl_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_shl_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_shl_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_shl_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_shl_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_shl_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shl_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shl_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shl_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shl_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shl_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shl_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shl_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shl_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shl_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shr_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shr_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shr_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shr_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shr_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shr_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shr_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shr_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_shr_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_shr_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_shr_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_shr_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_shr_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_shr_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_shr_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_shr_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shr_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_shr_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shr_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_shr_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shr_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_shr_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shr_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_shr_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_shr_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_land_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_land_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_land_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_land_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_land_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_land_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_land_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_land_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_land_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_land_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_land_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_land_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_land_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_land_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_land_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_land_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_land_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_land_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_land_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_land_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_land_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_land_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_land_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_land_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_land_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_land_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_land_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_land_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_land_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_land_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_lor_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_lor_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_lor_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_lor_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_lor_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_lor_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_lor_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_lor_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_lor_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_lor_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_lor_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_lor_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_lor_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_lor_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_lor_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_lor_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_lor_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_lor_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_lor_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_lor_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_lor_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_lor_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_lor_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_lor_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_lor_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_band_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_band_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_band_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_band_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_band_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_band_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_band_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_band_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_band_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_band_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_band_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_band_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_band_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_band_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_band_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_band_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_band_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_band_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_band_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_band_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_band_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_band_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_band_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_band_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_band_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_band_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_band_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_band_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_band_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_band_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bor_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bor_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bor_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bor_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bor_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bor_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bor_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bor_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_bor_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_bor_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_bor_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_bor_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_bor_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_bor_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_bor_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_bor_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bor_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bor_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bor_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bor_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bor_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bor_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bor_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bor_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bor_longlongbool(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_schar_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bxor_schar(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bxor_short_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_short(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_int_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bxor_int(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bxor_long_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_long(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longlong_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longlong(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_uchar_(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_bxor_uchar(volatile unsigned char *, unsigned char);
}
extern "C"
{
  extern void nanos_atomic_bxor_ushort_(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_ushort(volatile unsigned short int *, unsigned short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_uint_(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_bxor_uint(volatile unsigned int *, unsigned int);
}
extern "C"
{
  extern void nanos_atomic_bxor_ulong_(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_ulong(volatile unsigned long int *, unsigned long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_ulonglong_(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_ulonglong(volatile unsigned long long int *, unsigned long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_bytebool_(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bxor_bytebool(volatile signed char *, signed char);
}
extern "C"
{
  extern void nanos_atomic_bxor_shortbool_(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_shortbool(volatile short int *, short int);
}
extern "C"
{
  extern void nanos_atomic_bxor_intbool_(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bxor_intbool(volatile int *, int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longbool_(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longbool(volatile long int *, long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longlongbool_(volatile long long int *, long long int);
}
extern "C"
{
  extern void nanos_atomic_bxor_longlongbool(volatile long long int *, long long int);
}
typedef void *nanos_cpu_set_t;
enum nanos_omp_sched_t
{
  nanos_omp_sched_static = 1,
  nanos_omp_sched_dynamic = 2,
  nanos_omp_sched_guided = 3,
  nanos_omp_sched_auto = 4
};
extern "C"
{
  extern ::nanos_err_t nanos_omp_single_(bool *);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_single(bool *);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_barrier_();
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_barrier();
}
extern "C"
{
  void nanos_omp_set_interface(void *);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_set_implicit_(::nanos_wd_t uwd);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_set_implicit(::nanos_wd_t uwd);
}
extern "C"
{
  extern int nanos_omp_get_max_threads_();
}
extern "C"
{
  extern int nanos_omp_get_max_threads();
}
extern "C"
{
  extern int nanos_omp_get_num_threads_();
}
extern "C"
{
  extern int nanos_omp_get_num_threads();
}
extern "C"
{
  extern int nanos_omp_get_thread_num_();
}
extern "C"
{
  extern int nanos_omp_get_thread_num();
}
extern "C"
{
  extern int nanos_omp_set_num_threads_(int nthreads);
}
extern "C"
{
  extern int nanos_omp_set_num_threads(int nthreads);
}
extern "C"
{
  extern ::nanos_ws_t nanos_omp_find_worksharing_(::nanos_omp_sched_t kind);
}
extern "C"
{
  extern ::nanos_ws_t nanos_omp_find_worksharing(::nanos_omp_sched_t kind);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_get_schedule_(::nanos_omp_sched_t *kind, int *modifier);
}
extern "C"
{
  extern ::nanos_err_t nanos_omp_get_schedule(::nanos_omp_sched_t *kind, int *modifier);
}
extern "C"
{
  extern int nanos_omp_get_num_threads_next_parallel_(int threads_requested);
}
extern "C"
{
  extern int nanos_omp_get_num_threads_next_parallel(int threads_requested);
}
extern "C"
{
  extern void nanos_omp_get_mask_(::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern void nanos_omp_get_mask(::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern void nanos_omp_set_mask_(const ::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern void nanos_omp_set_mask(const ::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern void nanos_omp_add_mask_(const ::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern void nanos_omp_add_mask(const ::nanos_cpu_set_t cpu_set);
}
extern "C"
{
  extern int nanos_omp_get_max_processors_();
}
extern "C"
{
  extern int nanos_omp_get_max_processors();
}
namespace std __attribute__((__visibility__("default"))) {
  using ::ptrdiff_t;
  using ::size_t;
}
#pragma GCC visibility push(default)
namespace std __attribute__((__visibility__("default"))) {
  class  exception
  {
    public:
      inline exception() throw()
      {
      }
      virtual ~exception() throw();
      virtual const char *what() const  throw();
  };
  class  bad_exception : public ::std::exception
  {
    public:
      inline bad_exception() throw()
      {
      }
      virtual ~bad_exception() throw();
      virtual const char *what() const  throw();
  };
  typedef void (*terminate_handler)();
  typedef void (*unexpected_handler)();
  ::std::terminate_handler set_terminate(::std::terminate_handler) throw();
  void terminate() __attribute__((__noreturn__));
  ::std::unexpected_handler set_unexpected(::std::unexpected_handler) throw();
  void unexpected() __attribute__((__noreturn__));
  bool uncaught_exception() throw();
}
namespace __gnu_cxx __attribute__((__visibility__("default"))) {
  void __verbose_terminate_handler();
}
#pragma GCC visibility pop
#pragma GCC visibility push(default)
namespace std __attribute__((__visibility__("default"))) {
  class  bad_alloc : public ::std::exception
  {
    public:
      inline bad_alloc() throw()
      {
      }
      virtual ~bad_alloc() throw();
      virtual const char *what() const  throw();
  };
  struct  nothrow_t
  {
  };
  extern const ::std::nothrow_t nothrow;
  typedef void (*new_handler)();
  ::std::new_handler set_new_handler(::std::new_handler) throw();
}
void *operator new(::size_t, const ::std::nothrow_t &) throw();
void *operator new[](::size_t, const ::std::nothrow_t &) throw();
void operator delete(void *, const ::std::nothrow_t &) throw();
void operator delete[](void *, const ::std::nothrow_t &) throw();
inline void *operator new(::size_t, void *__p) throw()
{
  return __p;
}
inline void *operator new[](::size_t, void *__p) throw()
{
  return __p;
}
inline void operator delete(void *, void *) throw()
{
}
inline void operator delete[](void *, void *) throw()
{
}
#pragma GCC visibility pop
struct  nanos_opencl_args_t
{
    void (*outline)(void *);
};
extern "C"
{
  extern void *nanos_opencl_factory_(void *args);
}
extern "C"
{
  extern void *nanos_opencl_factory(void *args);
}
extern "C"
{
  extern void *nanos_create_current_kernel_(const char *kernel_name, const char *opencl_code, const char *compiler_opts);
}
extern "C"
{
  extern void *nanos_create_current_kernel(const char *kernel_name, const char *opencl_code, const char *compiler_opts);
}
extern "C"
{
  extern ::nanos_err_t nanos_opencl_set_bufferarg_(void *opencl_kernel, int arg_num, const void *pointer);
}
extern "C"
{
  extern ::nanos_err_t nanos_opencl_set_bufferarg(void *opencl_kernel, int arg_num, const void *pointer);
}
extern "C"
{
  extern ::nanos_err_t nanos_opencl_set_arg_(void *opencl_kernel, int arg_num, ::size_t size, const void *pointer);
}
extern "C"
{
  extern ::nanos_err_t nanos_opencl_set_arg(void *opencl_kernel, int arg_num, ::size_t size, const void *pointer);
}
extern "C"
{
  extern ::nanos_err_t nanos_exec_kernel_(void *opencl_kernel, int work_dim, ::size_t *ndr_offset, ::size_t *ndr_local_size, ::size_t *ndr_global_size);
}
extern "C"
{
  extern ::nanos_err_t nanos_exec_kernel(void *opencl_kernel, int work_dim, ::size_t *ndr_offset, ::size_t *ndr_local_size, ::size_t *ndr_global_size);
}
extern "C"
{
  unsigned int nanos_get_opencl_num_devices();
}
extern "C"
{
  void *ompss_opencl_malloc(::size_t size);
}
extern "C"
{
  void ompss_opencl_free(void *address);
}
extern "C"
{
  void nanos_get_opencl_num_devices_(int *numret);
}
extern "C"
{
  void *nanos_malloc_opencl(::size_t size) __attribute__((deprecated));
}
extern "C"
{
  void nanos_free_opencl(void *address) __attribute__((deprecated));
}
extern "C"
{
  extern void nanos_opencl_allocate_fortran_(::ptrdiff_t size, void *ptr);
}
extern "C"
{
  extern void nanos_opencl_allocate_fortran(::ptrdiff_t size, void *ptr);
}
extern "C"
{
  extern void nanos_opencl_deallocate_fortran_(void *address);
}
extern "C"
{
  extern void nanos_opencl_deallocate_fortran(void *address);
}
union  wait
{
    int w_status;
    struct  mcc_struct_anon_21
    {
        unsigned int __w_termsig:7;
        unsigned int __w_coredump:1;
        unsigned int __w_retcode:8;
        unsigned int:16;
    };
    ::wait::mcc_struct_anon_21 __wait_terminated;
    struct  mcc_struct_anon_22
    {
        unsigned int __w_stopval:8;
        unsigned int __w_stopsig:8;
        unsigned int:16;
    };
    ::wait::mcc_struct_anon_22 __wait_stopped;
};
struct  div_t
{
    int quot;
    int rem;
};
struct  ldiv_t
{
    long int quot;
    long int rem;
};
__extension__ struct  lldiv_t
{
    __extension__ long long int quot;
    __extension__ long long int rem;
};
extern "C"
{
  extern ::size_t __ctype_get_mb_cur_max() throw();
}
extern "C"
{
  extern double atof(const char *__nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int atoi(const char *__nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long int atol(const char *__nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long long int atoll(const char *__nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern double strtod(const char *__restrict __nptr, char **__restrict __endptr) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern float strtof(const char *__restrict __nptr, char **__restrict __endptr) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long double strtold(const char *__restrict __nptr, char **__restrict __endptr) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long int strtol(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern unsigned long int strtoul(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long long int strtoq(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern unsigned long long int strtouq(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long long int strtoll(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern unsigned long long int strtoull(const char *__restrict __nptr, char **__restrict __endptr, int __base) throw() __attribute__((__nonnull__(1)));
}
struct locale_data;
struct  __locale_struct
{
    ::locale_data *__locales[13];
    const unsigned short int *__ctype_b;
    const int *__ctype_tolower;
    const int *__ctype_toupper;
    const char *__names[13];
};
typedef ::__locale_struct *__locale_t;
typedef ::__locale_t locale_t;
extern "C"
{
  extern long int strtol_l(const char *__restrict __nptr, char **__restrict __endptr, int __base, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern unsigned long int strtoul_l(const char *__restrict __nptr, char **__restrict __endptr, int __base, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern long long int strtoll_l(const char *__restrict __nptr, char **__restrict __endptr, int __base, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern unsigned long long int strtoull_l(const char *__restrict __nptr, char **__restrict __endptr, int __base, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern double strtod_l(const char *__restrict __nptr, char **__restrict __endptr, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 3)));
}
extern "C"
{
  extern float strtof_l(const char *__restrict __nptr, char **__restrict __endptr, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 3)));
}
extern "C"
{
  extern long double strtold_l(const char *__restrict __nptr, char **__restrict __endptr, ::__locale_t __loc) throw() __attribute__((__nonnull__(1, 3)));
}
extern "C"
{
  extern char *l64a(long int __n) throw();
}
extern "C"
{
  extern long int a64l(const char *__s) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)));
}
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short int __int16_t;
typedef unsigned short int __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long int __int64_t;
typedef unsigned long int __uint64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
struct  __fsid_t
{
    int __val[2];
};
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __ssize_t;
typedef ::__off64_t __loff_t;
typedef ::__quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
typedef ::__u_char u_char;
typedef ::__u_short u_short;
typedef ::__u_int u_int;
typedef ::__u_long u_long;
typedef ::__quad_t quad_t;
typedef ::__u_quad_t u_quad_t;
typedef ::__fsid_t fsid_t;
typedef ::__loff_t loff_t;
typedef ::__ino_t ino_t;
typedef ::__ino64_t ino64_t;
typedef ::__dev_t dev_t;
typedef ::__gid_t gid_t;
typedef ::__mode_t mode_t;
typedef ::__nlink_t nlink_t;
typedef ::__uid_t uid_t;
typedef ::__off_t off_t;
typedef ::__off64_t off64_t;
typedef ::__pid_t pid_t;
typedef ::__id_t id_t;
typedef ::__ssize_t ssize_t;
typedef ::__daddr_t daddr_t;
typedef ::__caddr_t caddr_t;
typedef ::__key_t key_t;
typedef ::__clock_t clock_t;
typedef ::__time_t time_t;
typedef ::__clockid_t clockid_t;
typedef ::__timer_t timer_t;
typedef ::__useconds_t useconds_t;
typedef ::__suseconds_t suseconds_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
typedef unsigned char u_int8_t;
typedef unsigned short int u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long int u_int64_t;
typedef long int register_t;
typedef int __sig_atomic_t;
struct  __sigset_t
{
    unsigned long int __val[16U];
};
typedef ::__sigset_t sigset_t;
struct  timespec
{
    ::__time_t tv_sec;
    long int tv_nsec;
};
struct  timeval
{
    ::__time_t tv_sec;
    ::__suseconds_t tv_usec;
};
typedef long int __fd_mask;
struct  fd_set
{
    ::__fd_mask fds_bits[16];
};
typedef ::__fd_mask fd_mask;
extern "C"
{
  extern int select(int __nfds, ::fd_set *__restrict __readfds, ::fd_set *__restrict __writefds, ::fd_set *__restrict __exceptfds, ::timeval *__restrict __timeout);
}
extern "C"
{
  extern int pselect(int __nfds, ::fd_set *__restrict __readfds, ::fd_set *__restrict __writefds, ::fd_set *__restrict __exceptfds, const ::timespec *__restrict __timeout, const ::__sigset_t *__restrict __sigmask);
}
extern "C"
{
  extern unsigned int gnu_dev_major(unsigned long long int __dev) throw();
}
extern "C"
{
  extern unsigned int gnu_dev_minor(unsigned long long int __dev) throw();
}
extern "C"
{
  extern unsigned long long int gnu_dev_makedev(unsigned int __major, unsigned int __minor) throw();
}
typedef ::__blksize_t blksize_t;
typedef ::__blkcnt_t blkcnt_t;
typedef ::__fsblkcnt_t fsblkcnt_t;
typedef ::__fsfilcnt_t fsfilcnt_t;
typedef ::__blkcnt64_t blkcnt64_t;
typedef ::__fsblkcnt64_t fsblkcnt64_t;
typedef ::__fsfilcnt64_t fsfilcnt64_t;
typedef unsigned long int pthread_t;
union  pthread_attr_t
{
    char __size[56];
    long int __align;
};
struct __pthread_internal_list;
struct  __pthread_internal_list
{
    ::__pthread_internal_list *__prev;
    ::__pthread_internal_list *__next;
};
typedef ::__pthread_internal_list __pthread_list_t;
union  pthread_mutex_t
{
    struct  __pthread_mutex_s
    {
        int __lock;
        unsigned int __count;
        int __owner;
        unsigned int __nusers;
        int __kind;
        int __spins;
        ::__pthread_list_t __list;
    };
    ::pthread_mutex_t::__pthread_mutex_s __data;
    char __size[40];
    long int __align;
};
union  pthread_mutexattr_t
{
    char __size[4];
    int __align;
};
union  pthread_cond_t
{
    struct  mcc_struct_anon_33
    {
        int __lock;
        unsigned int __futex;
        __extension__ unsigned long long int __total_seq;
        __extension__ unsigned long long int __wakeup_seq;
        __extension__ unsigned long long int __woken_seq;
        void *__mutex;
        unsigned int __nwaiters;
        unsigned int __broadcast_seq;
    };
    ::pthread_cond_t::mcc_struct_anon_33 __data;
    char __size[48];
    __extension__ long long int __align;
};
union  pthread_condattr_t
{
    char __size[4];
    int __align;
};
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
union  pthread_rwlock_t
{
    struct  mcc_struct_anon_36
    {
        int __lock;
        unsigned int __nr_readers;
        unsigned int __readers_wakeup;
        unsigned int __writer_wakeup;
        unsigned int __nr_readers_queued;
        unsigned int __nr_writers_queued;
        int __writer;
        int __shared;
        unsigned long int __pad1;
        unsigned long int __pad2;
        unsigned int __flags;
    };
    ::pthread_rwlock_t::mcc_struct_anon_36 __data;
    char __size[56];
    long int __align;
};
union  pthread_rwlockattr_t
{
    char __size[8];
    long int __align;
};
typedef volatile int pthread_spinlock_t;
union  pthread_barrier_t
{
    char __size[32];
    long int __align;
};
union  pthread_barrierattr_t
{
    char __size[4];
    int __align;
};
extern "C"
{
  extern long int random() throw();
}
extern "C"
{
  extern void srandom(unsigned int __seed) throw();
}
extern "C"
{
  extern char *initstate(unsigned int __seed, char *__statebuf, ::size_t __statelen) throw() __attribute__((__nonnull__(2)));
}
extern "C"
{
  extern char *setstate(char *__statebuf) throw() __attribute__((__nonnull__(1)));
}
struct  random_data
{
    ::int32_t *fptr;
    ::int32_t *rptr;
    ::int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    ::int32_t *end_ptr;
};
extern "C"
{
  extern int random_r(::random_data *__restrict __buf, ::int32_t *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int srandom_r(unsigned int __seed, ::random_data *__buf) throw() __attribute__((__nonnull__(2)));
}
extern "C"
{
  extern int initstate_r(unsigned int __seed, char *__restrict __statebuf, ::size_t __statelen, ::random_data *__restrict __buf) throw() __attribute__((__nonnull__(2, 4)));
}
extern "C"
{
  extern int setstate_r(char *__restrict __statebuf, ::random_data *__restrict __buf) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int rand() throw();
}
extern "C"
{
  extern void srand(unsigned int __seed) throw();
}
extern "C"
{
  extern int rand_r(unsigned int *__seed) throw();
}
extern "C"
{
  extern double drand48() throw();
}
extern "C"
{
  extern double erand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long int lrand48() throw();
}
extern "C"
{
  extern long int nrand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern long int mrand48() throw();
}
extern "C"
{
  extern long int jrand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern void srand48(long int __seedval) throw();
}
extern "C"
{
  extern unsigned short int *seed48(unsigned short int __seed16v[3]) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern void lcong48(unsigned short int __param[7]) throw() __attribute__((__nonnull__(1)));
}
struct  drand48_data
{
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
};
extern "C"
{
  extern int drand48_r(::drand48_data *__restrict __buffer, double *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int erand48_r(unsigned short int __xsubi[3], ::drand48_data *__restrict __buffer, double *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int lrand48_r(::drand48_data *__restrict __buffer, long int *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int nrand48_r(unsigned short int __xsubi[3], ::drand48_data *__restrict __buffer, long int *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int mrand48_r(::drand48_data *__restrict __buffer, long int *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int jrand48_r(unsigned short int __xsubi[3], ::drand48_data *__restrict __buffer, long int *__restrict __result) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int srand48_r(long int __seedval, ::drand48_data *__buffer) throw() __attribute__((__nonnull__(2)));
}
extern "C"
{
  extern int seed48_r(unsigned short int __seed16v[3], ::drand48_data *__buffer) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern int lcong48_r(unsigned short int __param[7], ::drand48_data *__buffer) throw() __attribute__((__nonnull__(1, 2)));
}
extern "C"
{
  extern void *malloc(::size_t __size) throw() __attribute__((__malloc__));
}
extern "C"
{
  extern void *calloc(::size_t __nmemb, ::size_t __size) throw() __attribute__((__malloc__));
}
extern "C"
{
  extern void *realloc(void *__ptr, ::size_t __size) throw() __attribute__((__warn_unused_result__));
}
extern "C"
{
  extern void free(void *__ptr) throw();
}
extern "C"
{
  extern void cfree(void *__ptr) throw();
}
extern "C"
{
  extern void *alloca(::size_t __size) throw();
}
extern "C"
{
  extern void *valloc(::size_t __size) throw() __attribute__((__malloc__));
}
extern "C"
{
  extern int posix_memalign(void **__memptr, ::size_t __alignment, ::size_t __size) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern void abort() throw() __attribute__((__noreturn__));
}
extern "C"
{
  extern int atexit(void (*__func)()) throw() __attribute__((__nonnull__(1)));
}
int at_quick_exit(void (*__func)()) throw() __asm("at_quick_exit") __attribute__((__nonnull__(1)));
extern "C"
{
  extern int on_exit(void (*__func)(int, void *), void *__arg) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern void exit(int __status) throw() __attribute__((__noreturn__));
}
extern "C"
{
  extern void quick_exit(int __status) throw() __attribute__((__noreturn__));
}
extern "C"
{
  extern void _Exit(int __status) throw() __attribute__((__noreturn__));
}
extern "C"
{
  extern char *getenv(const char *__name) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern char *__secure_getenv(const char *__name) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int putenv(char *__string) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int setenv(const char *__name, const char *__value, int __replace) throw() __attribute__((__nonnull__(2)));
}
extern "C"
{
  extern int unsetenv(const char *__name) throw();
}
extern "C"
{
  extern int clearenv() throw();
}
extern "C"
{
  extern char *mktemp(char *__template) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkstemp(char *__template) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkstemp64(char *__template) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkstemps(char *__template, int __suffixlen) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkstemps64(char *__template, int __suffixlen) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern char *mkdtemp(char *__template) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkostemp(char *__template, int __flags) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkostemp64(char *__template, int __flags) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkostemps(char *__template, int __suffixlen, int __flags) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int mkostemps64(char *__template, int __suffixlen, int __flags) __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int system(const char *__command);
}
extern "C"
{
  extern char *canonicalize_file_name(const char *__name) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern char *realpath(const char *__restrict __name, char *__restrict __resolved) throw();
}
typedef int (*__compar_fn_t)(const void *, const void *);
typedef ::__compar_fn_t comparison_fn_t;
typedef int (*__compar_d_fn_t)(const void *, const void *, void *);
extern "C"
{
  extern void *bsearch(const void *__key, const void *__base, ::size_t __nmemb, ::size_t __size, ::__compar_fn_t __compar) __attribute__((__nonnull__(1, 2, 5)));
}
extern "C"
{
  extern void qsort(void *__base, ::size_t __nmemb, ::size_t __size, ::__compar_fn_t __compar) __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern void qsort_r(void *__base, ::size_t __nmemb, ::size_t __size, ::__compar_d_fn_t __compar, void *__arg) __attribute__((__nonnull__(1, 4)));
}
extern "C"
{
  extern int abs(int __x) throw() __attribute__((__const__));
}
extern "C"
{
  extern long int labs(long int __x) throw() __attribute__((__const__));
}
extern "C"
{
  extern long long int llabs(long long int __x) throw() __attribute__((__const__));
}
extern "C"
{
  extern ::div_t div(int __numer, int __denom) throw() __attribute__((__const__));
}
extern "C"
{
  extern ::ldiv_t ldiv(long int __numer, long int __denom) throw() __attribute__((__const__));
}
extern "C"
{
  extern ::lldiv_t lldiv(long long int __numer, long long int __denom) throw() __attribute__((__const__));
}
extern "C"
{
  extern char *ecvt(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) throw() __attribute__((__nonnull__(3, 4)));
}
extern "C"
{
  extern char *fcvt(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) throw() __attribute__((__nonnull__(3, 4)));
}
extern "C"
{
  extern char *gcvt(double __value, int __ndigit, char *__buf) throw() __attribute__((__nonnull__(3)));
}
extern "C"
{
  extern char *qecvt(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) throw() __attribute__((__nonnull__(3, 4)));
}
extern "C"
{
  extern char *qfcvt(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign) throw() __attribute__((__nonnull__(3, 4)));
}
extern "C"
{
  extern char *qgcvt(long double __value, int __ndigit, char *__buf) throw() __attribute__((__nonnull__(3)));
}
extern "C"
{
  extern int ecvt_r(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, ::size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
}
extern "C"
{
  extern int fcvt_r(double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, ::size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
}
extern "C"
{
  extern int qecvt_r(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, ::size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
}
extern "C"
{
  extern int qfcvt_r(long double __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, ::size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
}
extern "C"
{
  extern int mblen(const char *__s, ::size_t __n) throw();
}
extern "C"
{
  extern int mbtowc(wchar_t *__restrict __pwc, const char *__restrict __s, ::size_t __n) throw();
}
extern "C"
{
  extern int wctomb(char *__s, wchar_t __wchar) throw();
}
extern "C"
{
  extern ::size_t mbstowcs(wchar_t *__restrict __pwcs, const char *__restrict __s, ::size_t __n) throw();
}
extern "C"
{
  extern ::size_t wcstombs(char *__restrict __s, const wchar_t *__restrict __pwcs, ::size_t __n) throw();
}
extern "C"
{
  extern int rpmatch(const char *__response) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int getsubopt(char **__restrict __optionp, char *const *__restrict __tokens, char **__restrict __valuep) throw() __attribute__((__nonnull__(1, 2, 3)));
}
extern "C"
{
  extern void setkey(const char *__key) throw() __attribute__((__nonnull__(1)));
}
extern "C"
{
  extern int posix_openpt(int __oflag);
}
extern "C"
{
  extern int grantpt(int __fd) throw();
}
extern "C"
{
  extern int unlockpt(int __fd) throw();
}
extern "C"
{
  extern char *ptsname(int __fd) throw();
}
extern "C"
{
  extern int ptsname_r(int __fd, char *__buf, ::size_t __buflen) throw() __attribute__((__nonnull__(2)));
}
extern "C"
{
  extern int getpt();
}
extern "C"
{
  extern int getloadavg(double __loadavg[], int __nelem) throw() __attribute__((__nonnull__(1)));
}
struct _IO_FILE;
typedef ::_IO_FILE FILE;
typedef ::_IO_FILE __FILE;
struct  __mbstate_t
{
    int __count;
    union  mcc_union_anon_41
    {
        unsigned int __wch;
        char __wchb[4];
    };
    ::__mbstate_t::mcc_union_anon_41 __value;
};
struct  _G_fpos_t
{
    ::__off_t __pos;
    ::__mbstate_t __state;
};
struct  _G_fpos64_t
{
    ::__off64_t __pos;
    ::__mbstate_t __state;
};
typedef short int _G_int16_t;
typedef int _G_int32_t;
typedef unsigned short int _G_uint16_t;
typedef unsigned int _G_uint32_t;
typedef ::__builtin_va_list __gnuc_va_list;
struct _IO_jump_t;
typedef void _IO_lock_t;
struct _IO_marker;
struct  _IO_marker
{
    ::_IO_marker *_next;
    ::_IO_FILE *_sbuf;
    int _pos;
};
enum __codecvt_result
{
  __codecvt_ok = 0,
  __codecvt_partial = 1,
  __codecvt_error = 2,
  __codecvt_noconv = 3
};
struct  _IO_FILE
{
    int _flags;
    char *_IO_read_ptr;
    char *_IO_read_end;
    char *_IO_read_base;
    char *_IO_write_base;
    char *_IO_write_ptr;
    char *_IO_write_end;
    char *_IO_buf_base;
    char *_IO_buf_end;
    char *_IO_save_base;
    char *_IO_backup_base;
    char *_IO_save_end;
    ::_IO_marker *_markers;
    ::_IO_FILE *_chain;
    int _fileno;
    int _flags2;
    ::__off_t _old_offset;
    unsigned short int _cur_column;
    signed char _vtable_offset;
    char _shortbuf[1];
    ::_IO_lock_t *_lock;
    ::__off64_t _offset;
    void *__pad1;
    void *__pad2;
    void *__pad3;
    void *__pad4;
    ::size_t __pad5;
    int _mode;
    char _unused2[20U];
};
struct _IO_FILE_plus;
extern "C"
{
  extern ::_IO_FILE_plus _IO_2_1_stdin_;
}
extern "C"
{
  extern ::_IO_FILE_plus _IO_2_1_stdout_;
}
extern "C"
{
  extern ::_IO_FILE_plus _IO_2_1_stderr_;
}
typedef ::__ssize_t __io_read_fn(void *, char *, ::size_t);
typedef ::__ssize_t __io_write_fn(void *, const char *, ::size_t);
typedef int __io_seek_fn(void *, ::__off64_t *, int);
typedef int __io_close_fn(void *);
typedef ::__io_read_fn cookie_read_function_t;
typedef ::__io_write_fn cookie_write_function_t;
typedef ::__io_seek_fn cookie_seek_function_t;
typedef ::__io_close_fn cookie_close_function_t;
struct  _IO_cookie_io_functions_t
{
    ::__io_read_fn (*read);
    ::__io_write_fn (*write);
    ::__io_seek_fn (*seek);
    ::__io_close_fn (*close);
};
typedef ::_IO_cookie_io_functions_t cookie_io_functions_t;
struct _IO_cookie_file;
extern "C"
{
  extern void _IO_cookie_init(::_IO_cookie_file *__cfile, int __read_write, void *__cookie, ::_IO_cookie_io_functions_t __fns);
}
extern "C"
{
  extern int __underflow(::_IO_FILE *);
}
extern "C"
{
  extern int __uflow(::_IO_FILE *);
}
extern "C"
{
  extern int __overflow(::_IO_FILE *, int);
}
extern "C"
{
  extern int _IO_getc(::_IO_FILE *__fp);
}
extern "C"
{
  extern int _IO_putc(int __c, ::_IO_FILE *__fp);
}
extern "C"
{
  extern int _IO_feof(::_IO_FILE *__fp) throw();
}
extern "C"
{
  extern int _IO_ferror(::_IO_FILE *__fp) throw();
}
extern "C"
{
  extern int _IO_peekc_locked(::_IO_FILE *__fp);
}
extern "C"
{
  extern void _IO_flockfile(::_IO_FILE *) throw();
}
extern "C"
{
  extern void _IO_funlockfile(::_IO_FILE *) throw();
}
extern "C"
{
  extern int _IO_ftrylockfile(::_IO_FILE *) throw();
}
extern "C"
{
  extern int _IO_vfscanf(::_IO_FILE *__restrict , const char *__restrict , ::__gnuc_va_list, int *__restrict );
}
extern "C"
{
  extern int _IO_vfprintf(::_IO_FILE *__restrict , const char *__restrict , ::__gnuc_va_list);
}
extern "C"
{
  extern ::__ssize_t _IO_padn(::_IO_FILE *, int, ::__ssize_t);
}
extern "C"
{
  extern ::size_t _IO_sgetn(::_IO_FILE *, void *, ::size_t);
}
extern "C"
{
  extern ::__off64_t _IO_seekoff(::_IO_FILE *, ::__off64_t, int, int);
}
extern "C"
{
  extern ::__off64_t _IO_seekpos(::_IO_FILE *, ::__off64_t, int);
}
extern "C"
{
  extern void _IO_free_backup_area(::_IO_FILE *) throw();
}
typedef ::__gnuc_va_list va_list;
typedef ::_G_fpos_t fpos_t;
typedef ::_G_fpos64_t fpos64_t;
extern "C"
{
  extern ::_IO_FILE *stdin;
}
extern "C"
{
  extern ::_IO_FILE *stdout;
}
extern "C"
{
  extern ::_IO_FILE *stderr;
}
extern "C"
{
  extern int remove(const char *__filename) throw();
}
extern "C"
{
  extern int rename(const char *__old, const char *__new) throw();
}
extern "C"
{
  extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new) throw();
}
extern "C"
{
  extern ::FILE *tmpfile();
}
extern "C"
{
  extern ::FILE *tmpfile64();
}
extern "C"
{
  extern char *tmpnam(char *__s) throw();
}
extern "C"
{
  extern char *tmpnam_r(char *__s) throw();
}
extern "C"
{
  extern char *tempnam(const char *__dir, const char *__pfx) throw() __attribute__((__malloc__));
}
extern "C"
{
  extern int fclose(::FILE *__stream);
}
extern "C"
{
  extern int fflush(::FILE *__stream);
}
extern "C"
{
  extern int fflush_unlocked(::FILE *__stream);
}
extern "C"
{
  extern int fcloseall();
}
extern "C"
{
  extern ::FILE *fopen(const char *__restrict __filename, const char *__restrict __modes);
}
extern "C"
{
  extern ::FILE *freopen(const char *__restrict __filename, const char *__restrict __modes, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::FILE *fopen64(const char *__restrict __filename, const char *__restrict __modes);
}
extern "C"
{
  extern ::FILE *freopen64(const char *__restrict __filename, const char *__restrict __modes, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::FILE *fdopen(int __fd, const char *__modes) throw();
}
extern "C"
{
  extern ::FILE *fopencookie(void *__restrict __magic_cookie, const char *__restrict __modes, ::_IO_cookie_io_functions_t __io_funcs) throw();
}
extern "C"
{
  extern ::FILE *fmemopen(void *__s, ::size_t __len, const char *__modes) throw();
}
extern "C"
{
  extern ::FILE *open_memstream(char **__bufloc, ::size_t *__sizeloc) throw();
}
extern "C"
{
  extern void setbuf(::FILE *__restrict __stream, char *__restrict __buf) throw();
}
extern "C"
{
  extern int setvbuf(::FILE *__restrict __stream, char *__restrict __buf, int __modes, ::size_t __n) throw();
}
extern "C"
{
  extern void setbuffer(::FILE *__restrict __stream, char *__restrict __buf, ::size_t __size) throw();
}
extern "C"
{
  extern void setlinebuf(::FILE *__stream) throw();
}
extern "C"
{
  extern int fprintf(::FILE *__restrict __stream, const char *__restrict __format, ...);
}
extern "C"
{
  extern int printf(const char *__restrict __format, ...);
}
extern "C"
{
  extern int sprintf(char *__restrict __s, const char *__restrict __format, ...) throw();
}
extern "C"
{
  extern int vfprintf(::FILE *__restrict __s, const char *__restrict __format, ::__gnuc_va_list __arg);
}
extern "C"
{
  extern int vprintf(const char *__restrict __format, ::__gnuc_va_list __arg);
}
extern "C"
{
  extern int vsprintf(char *__restrict __s, const char *__restrict __format, ::__gnuc_va_list __arg) throw();
}
extern "C"
{
  extern int snprintf(char *__restrict __s, ::size_t __maxlen, const char *__restrict __format, ...) throw() __attribute__((__format__(__printf__, 3, 4)));
}
extern "C"
{
  extern int vsnprintf(char *__restrict __s, ::size_t __maxlen, const char *__restrict __format, ::__gnuc_va_list __arg) throw() __attribute__((__format__(__printf__, 3, 0)));
}
extern "C"
{
  extern int vasprintf(char **__restrict __ptr, const char *__restrict __f, ::__gnuc_va_list __arg) throw() __attribute__((__format__(__printf__, 2, 0)));
}
extern "C"
{
  extern int __asprintf(char **__restrict __ptr, const char *__restrict __fmt, ...) throw() __attribute__((__format__(__printf__, 2, 3)));
}
extern "C"
{
  extern int asprintf(char **__restrict __ptr, const char *__restrict __fmt, ...) throw() __attribute__((__format__(__printf__, 2, 3)));
}
extern "C"
{
  extern int vdprintf(int __fd, const char *__restrict __fmt, ::__gnuc_va_list __arg) __attribute__((__format__(__printf__, 2, 0)));
}
extern "C"
{
  extern int dprintf(int __fd, const char *__restrict __fmt, ...) __attribute__((__format__(__printf__, 2, 3)));
}
extern "C"
{
  extern int fscanf(::FILE *__restrict __stream, const char *__restrict __format, ...);
}
extern "C"
{
  extern int scanf(const char *__restrict __format, ...);
}
extern "C"
{
  extern int sscanf(const char *__restrict __s, const char *__restrict __format, ...) throw();
}
extern "C"
{
  extern int vfscanf(::FILE *__restrict __s, const char *__restrict __format, ::__gnuc_va_list __arg) __attribute__((__format__(__scanf__, 2, 0)));
}
extern "C"
{
  extern int vscanf(const char *__restrict __format, ::__gnuc_va_list __arg) __attribute__((__format__(__scanf__, 1, 0)));
}
extern "C"
{
  extern int vsscanf(const char *__restrict __s, const char *__restrict __format, ::__gnuc_va_list __arg) throw() __attribute__((__format__(__scanf__, 2, 0)));
}
extern "C"
{
  extern int fgetc(::FILE *__stream);
}
extern "C"
{
  extern int getc(::FILE *__stream);
}
extern "C"
{
  extern int getchar();
}
extern "C"
{
  extern int getc_unlocked(::FILE *__stream);
}
extern "C"
{
  extern int getchar_unlocked();
}
extern "C"
{
  extern int fgetc_unlocked(::FILE *__stream);
}
extern "C"
{
  extern int fputc(int __c, ::FILE *__stream);
}
extern "C"
{
  extern int putc(int __c, ::FILE *__stream);
}
extern "C"
{
  extern int putchar(int __c);
}
extern "C"
{
  extern int fputc_unlocked(int __c, ::FILE *__stream);
}
extern "C"
{
  extern int putc_unlocked(int __c, ::FILE *__stream);
}
extern "C"
{
  extern int putchar_unlocked(int __c);
}
extern "C"
{
  extern int getw(::FILE *__stream);
}
extern "C"
{
  extern int putw(int __w, ::FILE *__stream);
}
extern "C"
{
  extern char *fgets(char *__restrict __s, int __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern char *gets(char *__s);
}
extern "C"
{
  extern char *fgets_unlocked(char *__restrict __s, int __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::__ssize_t __getdelim(char **__restrict __lineptr, ::size_t *__restrict __n, int __delimiter, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::__ssize_t getdelim(char **__restrict __lineptr, ::size_t *__restrict __n, int __delimiter, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::__ssize_t getline(char **__restrict __lineptr, ::size_t *__restrict __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern int fputs(const char *__restrict __s, ::FILE *__restrict __stream);
}
extern "C"
{
  extern int puts(const char *__s);
}
extern "C"
{
  extern int ungetc(int __c, ::FILE *__stream);
}
extern "C"
{
  extern ::size_t fread(void *__restrict __ptr, ::size_t __size, ::size_t __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::size_t fwrite(const void *__restrict __ptr, ::size_t __size, ::size_t __n, ::FILE *__restrict __s);
}
extern "C"
{
  extern int fputs_unlocked(const char *__restrict __s, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::size_t fread_unlocked(void *__restrict __ptr, ::size_t __size, ::size_t __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern ::size_t fwrite_unlocked(const void *__restrict __ptr, ::size_t __size, ::size_t __n, ::FILE *__restrict __stream);
}
extern "C"
{
  extern int fseek(::FILE *__stream, long int __off, int __whence);
}
extern "C"
{
  extern long int ftell(::FILE *__stream);
}
extern "C"
{
  extern void rewind(::FILE *__stream);
}
extern "C"
{
  extern int fseeko(::FILE *__stream, ::__off_t __off, int __whence);
}
extern "C"
{
  extern ::__off_t ftello(::FILE *__stream);
}
extern "C"
{
  extern int fgetpos(::FILE *__restrict __stream, ::fpos_t *__restrict __pos);
}
extern "C"
{
  extern int fsetpos(::FILE *__stream, const ::fpos_t *__pos);
}
extern "C"
{
  extern int fseeko64(::FILE *__stream, ::__off64_t __off, int __whence);
}
extern "C"
{
  extern ::__off64_t ftello64(::FILE *__stream);
}
extern "C"
{
  extern int fgetpos64(::FILE *__restrict __stream, ::fpos64_t *__restrict __pos);
}
extern "C"
{
  extern int fsetpos64(::FILE *__stream, const ::fpos64_t *__pos);
}
extern "C"
{
  extern void clearerr(::FILE *__stream) throw();
}
extern "C"
{
  extern int feof(::FILE *__stream) throw();
}
extern "C"
{
  extern int ferror(::FILE *__stream) throw();
}
extern "C"
{
  extern void clearerr_unlocked(::FILE *__stream) throw();
}
extern "C"
{
  extern int feof_unlocked(::FILE *__stream) throw();
}
extern "C"
{
  extern int ferror_unlocked(::FILE *__stream) throw();
}
extern "C"
{
  extern void perror(const char *__s);
}
extern "C"
{
  extern int sys_nerr;
}
extern "C"
{
  extern const char *const sys_errlist[];
}
extern "C"
{
  extern int _sys_nerr;
}
extern "C"
{
  extern const char *const _sys_errlist[];
}
extern "C"
{
  extern int fileno(::FILE *__stream) throw();
}
extern "C"
{
  extern int fileno_unlocked(::FILE *__stream) throw();
}
extern "C"
{
  extern ::FILE *popen(const char *__command, const char *__modes);
}
extern "C"
{
  extern int pclose(::FILE *__stream);
}
extern "C"
{
  extern char *ctermid(char *__s) throw();
}
extern "C"
{
  extern char *cuserid(char *__s);
}
struct obstack;
extern "C"
{
  extern int obstack_printf(::obstack *__restrict __obstack, const char *__restrict __format, ...) throw() __attribute__((__format__(__printf__, 2, 3)));
}
extern "C"
{
  extern int obstack_vprintf(::obstack *__restrict __obstack, const char *__restrict __format, ::__gnuc_va_list __args) throw() __attribute__((__format__(__printf__, 2, 0)));
}
extern "C"
{
  extern void flockfile(::FILE *__stream) throw();
}
extern "C"
{
  extern int ftrylockfile(::FILE *__stream) throw();
}
extern "C"
{
  extern void funlockfile(::FILE *__stream) throw();
}
typedef void *omp_lock_t;
typedef void *omp_nest_lock_t;
enum omp_sched_t
{
  omp_sched_static = ::nanos_omp_sched_static,
  omp_sched_dynamic = ::nanos_omp_sched_dynamic,
  omp_sched_guided = ::nanos_omp_sched_guided,
  omp_sched_auto = ::nanos_omp_sched_auto
};
extern "C"
{
  extern void omp_set_num_threads(int num_threads);
}
extern "C"
{
  extern int omp_get_num_threads();
}
extern "C"
{
  extern int omp_get_max_threads();
}
extern "C"
{
  extern int omp_get_thread_num();
}
extern "C"
{
  extern int omp_get_num_procs();
}
extern "C"
{
  extern int omp_in_parallel();
}
extern "C"
{
  extern void omp_set_dynamic(int dynamic_threads);
}
extern "C"
{
  extern int omp_get_dynamic();
}
extern "C"
{
  extern void omp_set_nested(int nested);
}
extern "C"
{
  extern int omp_get_nested();
}
extern "C"
{
  extern int omp_get_thread_limit();
}
extern "C"
{
  extern void omp_set_max_active_levels(int max_active_levels);
}
extern "C"
{
  extern int omp_get_max_active_levels();
}
extern "C"
{
  extern void omp_set_schedule(::omp_sched_t kind, int modifier);
}
extern "C"
{
  extern void omp_get_schedule(::omp_sched_t *kind, int *modifier);
}
extern "C"
{
  extern int omp_get_level();
}
extern "C"
{
  extern int omp_get_ancestor_thread_num(int level);
}
extern "C"
{
  extern int omp_get_team_size(int level);
}
extern "C"
{
  extern int omp_get_active_level();
}
extern "C"
{
  extern void omp_init_lock(::omp_lock_t *lock);
}
extern "C"
{
  extern void omp_destroy_lock(::omp_lock_t *lock);
}
extern "C"
{
  extern void omp_set_lock(::omp_lock_t *lock);
}
extern "C"
{
  extern void omp_unset_lock(::omp_lock_t *lock);
}
extern "C"
{
  extern int omp_test_lock(::omp_lock_t *lock);
}
extern "C"
{
  extern void omp_init_nest_lock(::omp_nest_lock_t *lock);
}
extern "C"
{
  extern void omp_destroy_nest_lock(::omp_nest_lock_t *lock);
}
extern "C"
{
  extern void omp_set_nest_lock(::omp_nest_lock_t *lock);
}
extern "C"
{
  extern void omp_unset_nest_lock(::omp_nest_lock_t *lock);
}
extern "C"
{
  extern int omp_test_nest_lock(::omp_nest_lock_t *lock);
}
extern "C"
{
  extern double omp_get_wtime();
}
extern "C"
{
  extern double omp_get_wtick();
}
extern "C"
{
  extern int omp_in_final();
}
int ori_n;
int final(0);
void fib_mcc_serial(int n, int *res);
void fib_mcc_serial(int n, int *res)
{
  if (n < 2)
    {
      *res = n;
    }
  else
    {
      void * map = ::nanos_memo_get_map( ::nanos_current_wd(), &(::fib_mcc_serial) );
      std::tr1::unordered_map<unsigned int, void*> memo_map = (std::tr1::unordered_map<unsigned int, void*>) map;
      std::tr1::unordered_map<unsigned int, void*> data_it;
      int * res1 = new int(0);
      int * res2 = new int(0);
      //n-1
      data_it = memo_map.find( n-1 );
      if( data_it != memo_map.end() ){
        char * data = (char *) data_it->second();
        memcpy( res1, data, sizeof(*res1) );
      }
      else {
        ::fib_mcc_serial(n-1, res1);
        memo_map.insert( std::make_pair( n-1, res1 ) );
      }
      //n-2
      data_it = memo_map.find( n-2 );
      if( data_it != memo_map.end() ){
        char * data = (char *) data_it->second();
        memcpy( res2, data, sizeof(*res2) );
      }
      else {
        ::fib_mcc_serial(n-2, res2);
        memo_map.insert( std::make_pair( n-2, res2 ) );
      }
      *res = *res1 + *res2;
    }
}
struct  nanos_args_0_t
{
    int n;
    int *res;
};
static void smp_ol_fib_1_unpacked(int n, int *res) throw();
static void smp_ol_fib_1(::nanos_args_0_t &args) throw();
static void nanos_xlate_fun_fibompmemocpp_0(::nanos_args_0_t &arg, void *wd) throw()
{
  {
    void *device_base_address;
    ::nanos_err_t err;
    device_base_address = 0;
    err = ::nanos_get_addr(0, &device_base_address, wd);
    if (err != ::NANOS_OK)
      {
        ::nanos_handle_error(err);
      }
    arg.res = (int *)device_base_address;
  }
}
struct  nanos_args_1_t
{
    int n;
    int *res;
};
static void smp_ol_fib_3_unpacked(int n, int *res) throw();
static void smp_ol_fib_3(::nanos_args_1_t &args) throw();
static void nanos_xlate_fun_fibompmemocpp_1(::nanos_args_1_t &arg, void *wd) throw()
{
  {
    void *device_base_address;
    ::nanos_err_t err;
    device_base_address = 0;
    err = ::nanos_get_addr(0, &device_base_address, wd);
    if (err != ::NANOS_OK)
      {
        ::nanos_handle_error(err);
      }
    arg.res = (int *)device_base_address;
  }
}
void fib(int n, int *res)
{
  if (n < 2)
    {
      *res = n;
    }
  else
    {
      int res1(0);
      int res2(0);
      {
        int mcc_arg_0(n - 1);
        int *mcc_arg_1(&res1);
        {
          bool mcc_is_in_final;
          ::nanos_err_t mcc_err_in_final(::nanos_in_final(&mcc_is_in_final));
          if (mcc_err_in_final != ::NANOS_OK)
            {
              ::nanos_handle_error(mcc_err_in_final);
            }
          if (mcc_is_in_final)
            {
              ::fib_mcc_serial(n - 1, &res1);
            }
          else
            {
              {
                static ::nanos_smp_args_t smp_ol_fib_1_args = { /* .::nanos_smp_args_t::outline =  */ (void (*)(void *))(void (*)(::nanos_args_0_t &))::smp_ol_fib_1};
                static ::nanos_const_wd_definition_1 nanos_wd_const_data = { /* .::nanos_const_wd_definition_1::base =  */ { /* .::nanos_const_wd_definition_tag::props =  */ { /* .::nanos_wd_props_t::mandatory_creation =  */ 0,  /* .::nanos_wd_props_t::tied =  */ 0,  /* .::nanos_wd_props_t::clear_chunk =  */ 0,  /* .::nanos_wd_props_t::reserved0 =  */ 0,  /* .::nanos_wd_props_t::reserved1 =  */ 0,  /* .::nanos_wd_props_t::reserved2 =  */ 0,  /* .::nanos_wd_props_t::reserved3 =  */ 0,  /* .::nanos_wd_props_t::reserved4 =  */ 0},  /* .::nanos_const_wd_definition_tag::data_alignment =  */ __alignof__(::nanos_args_0_t),  /* .::nanos_const_wd_definition_tag::num_copies =  */ 1,  /* .::nanos_const_wd_definition_tag::num_devices =  */ 1,  /* .::nanos_const_wd_definition_tag::num_dimensions =  */ 1,  /* .::nanos_const_wd_definition_tag::description =  */ 0},  /* .::nanos_const_wd_definition_1::devices =  */ { /* [0] =  */ { /* .::nanos_device_t::factory =  */ ::nanos_smp_factory,  /* .::nanos_device_t::arg =  */ &smp_ol_fib_1_args}}};
                ::nanos_wd_dyn_props_t nanos_wd_dyn_props;
                nanos_wd_dyn_props.tie_to = 0;
                nanos_wd_dyn_props.priority = 0;
                nanos_wd_dyn_props.flags.is_final = 1;
                ::nanos_args_0_t *ol_args;
                ol_args = (::nanos_args_0_t *)0;
                ::nanos_args_0_t imm_args;
                ::nanos_wd_t nanos_wd_((void *)0);
                ::nanos_copy_data_t *ol_copy_data((::nanos_copy_data_t *)0);
                ::nanos_region_dimension_internal_t *ol_copy_dimensions((::nanos_region_dimension_internal_t *)0);
                ::nanos_err_t err;
                err = ::nanos_create_wd_compact(&nanos_wd_, &nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_0_t &), (void **)&ol_args, ::nanos_current_wd(), &ol_copy_data, &ol_copy_dimensions);
                if (err != ::NANOS_OK)
                  {
                    ::nanos_handle_error(err);
                  }
                ::nanos_region_dimension_t dimensions_0[1] = { /* [0] =  */ { /* .::nanos_region_dimension_internal_t::size =  */ sizeof(int),  /* .::nanos_region_dimension_internal_t::lower_bound =  */ 0,  /* .::nanos_region_dimension_internal_t::accessed_length =  */ sizeof(int)}};
                ::nanos_data_access_t dependences[1] = { /* [0] =  */ { /* .::nanos_data_access_internal_t::address =  */ (void *)mcc_arg_1,  /* .::nanos_data_access_internal_t::flags =  */ { /* .::nanos_access_type_internal_t::input =  */ 0,  /* .::nanos_access_type_internal_t::output =  */ 1,  /* .::nanos_access_type_internal_t::can_rename =  */ 0,  /* .::nanos_access_type_internal_t::concurrent =  */ 0,  /* .::nanos_access_type_internal_t::commutative =  */ 0},  /* .::nanos_data_access_internal_t::dimension_count =  */ (short int)1,  /* .::nanos_data_access_internal_t::dimensions =  */ dimensions_0,  /* .::nanos_data_access_internal_t::offset =  */ 0}};
                ;
                if (nanos_wd_ != (void *)0)
                  {
                    (*ol_args).n = mcc_arg_0;
                    (*ol_args).res = mcc_arg_1;
                    ol_copy_dimensions[0].size = 1 * sizeof(int);
                    ol_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                    ol_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                    ol_copy_data[0].sharing = ::NANOS_SHARED;
                    ol_copy_data[0].address = (void *)mcc_arg_1;
                    ol_copy_data[0].flags.input = 0;
                    ol_copy_data[0].flags.output = 1;
                    ol_copy_data[0].dimension_count = (short int)1;
                    ol_copy_data[0].dimensions = &ol_copy_dimensions[0];
                    ol_copy_data[0].offset = 0;
                    err = ::nanos_set_translate_function(nanos_wd_, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_0);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                    err = ::nanos_submit(nanos_wd_, 1, dependences, (void *)0);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                  }
                else
                  {
                    imm_args.n = mcc_arg_0;
                    imm_args.res = mcc_arg_1;
                    ::nanos_copy_data_t imm_copy_data[1];
                    ::nanos_region_dimension_internal_t imm_copy_dimensions[1];
                    imm_copy_dimensions[0].size = 1 * sizeof(int);
                    imm_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                    imm_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                    imm_copy_data[0].sharing = ::NANOS_SHARED;
                    imm_copy_data[0].address = (void *)mcc_arg_1;
                    imm_copy_data[0].flags.input = 0;
                    imm_copy_data[0].flags.output = 1;
                    imm_copy_data[0].dimension_count = (short int)1;
                    imm_copy_data[0].dimensions = &imm_copy_dimensions[0];
                    imm_copy_data[0].offset = 0;
                    err = ::nanos_create_wd_and_run_compact(&nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_0_t &), &imm_args, 1, dependences, imm_copy_data, imm_copy_dimensions, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_0);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                  }
              }
            }
        }
      }
      {
        int mcc_arg_4(n - 2);
        int *mcc_arg_5(&res2);
        {
          bool mcc_is_in_final;
          ::nanos_err_t mcc_err_in_final(::nanos_in_final(&mcc_is_in_final));
          if (mcc_err_in_final != ::NANOS_OK)
            {
              ::nanos_handle_error(mcc_err_in_final);
            }
          if (mcc_is_in_final)
            {
              ::fib_mcc_serial(n - 2, &res2);
            }
          else
            {
              {
                static ::nanos_smp_args_t smp_ol_fib_3_args = { /* .::nanos_smp_args_t::outline =  */ (void (*)(void *))(void (*)(::nanos_args_1_t &))::smp_ol_fib_3};
                static ::nanos_const_wd_definition_1 nanos_wd_const_data = { /* .::nanos_const_wd_definition_1::base =  */ { /* .::nanos_const_wd_definition_tag::props =  */ { /* .::nanos_wd_props_t::mandatory_creation =  */ 0,  /* .::nanos_wd_props_t::tied =  */ 0,  /* .::nanos_wd_props_t::clear_chunk =  */ 0,  /* .::nanos_wd_props_t::reserved0 =  */ 0,  /* .::nanos_wd_props_t::reserved1 =  */ 0,  /* .::nanos_wd_props_t::reserved2 =  */ 0,  /* .::nanos_wd_props_t::reserved3 =  */ 0,  /* .::nanos_wd_props_t::reserved4 =  */ 0},  /* .::nanos_const_wd_definition_tag::data_alignment =  */ __alignof__(::nanos_args_1_t),  /* .::nanos_const_wd_definition_tag::num_copies =  */ 1,  /* .::nanos_const_wd_definition_tag::num_devices =  */ 1,  /* .::nanos_const_wd_definition_tag::num_dimensions =  */ 1,  /* .::nanos_const_wd_definition_tag::description =  */ 0},  /* .::nanos_const_wd_definition_1::devices =  */ { /* [0] =  */ { /* .::nanos_device_t::factory =  */ ::nanos_smp_factory,  /* .::nanos_device_t::arg =  */ &smp_ol_fib_3_args}}};
                ::nanos_wd_dyn_props_t nanos_wd_dyn_props;
                nanos_wd_dyn_props.tie_to = 0;
                nanos_wd_dyn_props.priority = 0;
                nanos_wd_dyn_props.flags.is_final = 1;
                ::nanos_args_1_t *ol_args;
                ol_args = (::nanos_args_1_t *)0;
                ::nanos_args_1_t imm_args;
                ::nanos_wd_t nanos_wd_((void *)0);
                ::nanos_copy_data_t *ol_copy_data((::nanos_copy_data_t *)0);
                ::nanos_region_dimension_internal_t *ol_copy_dimensions((::nanos_region_dimension_internal_t *)0);
                ::nanos_err_t err;
                err = ::nanos_create_wd_compact(&nanos_wd_, &nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_1_t &), (void **)&ol_args, ::nanos_current_wd(), &ol_copy_data, &ol_copy_dimensions);
                if (err != ::NANOS_OK)
                  {
                    ::nanos_handle_error(err);
                  }
                ::nanos_region_dimension_t dimensions_0[1] = { /* [0] =  */ { /* .::nanos_region_dimension_internal_t::size =  */ sizeof(int),  /* .::nanos_region_dimension_internal_t::lower_bound =  */ 0,  /* .::nanos_region_dimension_internal_t::accessed_length =  */ sizeof(int)}};
                ::nanos_data_access_t dependences[1] = { /* [0] =  */ { /* .::nanos_data_access_internal_t::address =  */ (void *)mcc_arg_5,  /* .::nanos_data_access_internal_t::flags =  */ { /* .::nanos_access_type_internal_t::input =  */ 0,  /* .::nanos_access_type_internal_t::output =  */ 1,  /* .::nanos_access_type_internal_t::can_rename =  */ 0,  /* .::nanos_access_type_internal_t::concurrent =  */ 0,  /* .::nanos_access_type_internal_t::commutative =  */ 0},  /* .::nanos_data_access_internal_t::dimension_count =  */ (short int)1,  /* .::nanos_data_access_internal_t::dimensions =  */ dimensions_0,  /* .::nanos_data_access_internal_t::offset =  */ 0}};
                ;
                if (nanos_wd_ != (void *)0)
                  {
                    (*ol_args).n = mcc_arg_4;
                    (*ol_args).res = mcc_arg_5;
                    ol_copy_dimensions[0].size = 1 * sizeof(int);
                    ol_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                    ol_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                    ol_copy_data[0].sharing = ::NANOS_SHARED;
                    ol_copy_data[0].address = (void *)mcc_arg_5;
                    ol_copy_data[0].flags.input = 0;
                    ol_copy_data[0].flags.output = 1;
                    ol_copy_data[0].dimension_count = (short int)1;
                    ol_copy_data[0].dimensions = &ol_copy_dimensions[0];
                    ol_copy_data[0].offset = 0;
                    err = ::nanos_set_translate_function(nanos_wd_, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_1);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                    err = ::nanos_submit(nanos_wd_, 1, dependences, (void *)0);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                  }
                else
                  {
                    imm_args.n = mcc_arg_4;
                    imm_args.res = mcc_arg_5;
                    ::nanos_copy_data_t imm_copy_data[1];
                    ::nanos_region_dimension_internal_t imm_copy_dimensions[1];
                    imm_copy_dimensions[0].size = 1 * sizeof(int);
                    imm_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                    imm_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                    imm_copy_data[0].sharing = ::NANOS_SHARED;
                    imm_copy_data[0].address = (void *)mcc_arg_5;
                    imm_copy_data[0].flags.input = 0;
                    imm_copy_data[0].flags.output = 1;
                    imm_copy_data[0].dimension_count = (short int)1;
                    imm_copy_data[0].dimensions = &imm_copy_dimensions[0];
                    imm_copy_data[0].offset = 0;
                    err = ::nanos_create_wd_and_run_compact(&nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_1_t &), &imm_args, 1, dependences, imm_copy_data, imm_copy_dimensions, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_1);
                    if (err != ::NANOS_OK)
                      {
                        ::nanos_handle_error(err);
                      }
                  }
              }
            }
        }
      }
      {
        ::nanos_wd_t nanos_wd_(::nanos_current_wd());
        ::nanos_err_t err;
        err = ::nanos_wg_wait_completion(nanos_wd_, 0);
        if (err != ::NANOS_OK)
          {
            ::nanos_handle_error(err);
          }
      }
      *res = res1 + res2;
    }
}
struct  nanos_args_2_t
{
    int n;
    int *res;
};
static void smp_ol_fib_5_unpacked(int n, int *res) throw();
static void smp_ol_fib_5(::nanos_args_2_t &args) throw();
static void nanos_xlate_fun_fibompmemocpp_2(::nanos_args_2_t &arg, void *wd) throw()
{
  {
    void *device_base_address;
    ::nanos_err_t err;
    device_base_address = 0;
    err = ::nanos_get_addr(0, &device_base_address, wd);
    if (err != ::NANOS_OK)
      {
        ::nanos_handle_error(err);
      }
    arg.res = (int *)device_base_address;
  }
}
int main(int argc, char **argv)
{
  if (argc < 2)
    {
      ::printf("usage: %s n\n", argv[0]);
      ::exit(0);
    }
  int n(::atoi(argv[1]));
  if (argc == 3)
    {
      ::final = ::atoi(argv[2]);
    }
  ::ori_n = n;
  int res(0);
  double start(::omp_get_wtime());
  {
    int mcc_arg_8(n);
    int *mcc_arg_9(&res);
    {
      bool mcc_is_in_final;
      ::nanos_err_t mcc_err_in_final(::nanos_in_final(&mcc_is_in_final));
      if (mcc_err_in_final != ::NANOS_OK)
        {
          ::nanos_handle_error(mcc_err_in_final);
        }
      if (mcc_is_in_final)
        {
          ::fib_mcc_serial(n, &res);
        }
      else
        {
          {
            static ::nanos_smp_args_t smp_ol_fib_5_args = { /* .::nanos_smp_args_t::outline =  */ (void (*)(void *))(void (*)(::nanos_args_2_t &))::smp_ol_fib_5};
            static ::nanos_const_wd_definition_1 nanos_wd_const_data = { /* .::nanos_const_wd_definition_1::base =  */ { /* .::nanos_const_wd_definition_tag::props =  */ { /* .::nanos_wd_props_t::mandatory_creation =  */ 0,  /* .::nanos_wd_props_t::tied =  */ 0,  /* .::nanos_wd_props_t::clear_chunk =  */ 0,  /* .::nanos_wd_props_t::reserved0 =  */ 0,  /* .::nanos_wd_props_t::reserved1 =  */ 0,  /* .::nanos_wd_props_t::reserved2 =  */ 0,  /* .::nanos_wd_props_t::reserved3 =  */ 0,  /* .::nanos_wd_props_t::reserved4 =  */ 0},  /* .::nanos_const_wd_definition_tag::data_alignment =  */ __alignof__(::nanos_args_2_t),  /* .::nanos_const_wd_definition_tag::num_copies =  */ 1,  /* .::nanos_const_wd_definition_tag::num_devices =  */ 1,  /* .::nanos_const_wd_definition_tag::num_dimensions =  */ 1,  /* .::nanos_const_wd_definition_tag::description =  */ 0},  /* .::nanos_const_wd_definition_1::devices =  */ { /* [0] =  */ { /* .::nanos_device_t::factory =  */ ::nanos_smp_factory,  /* .::nanos_device_t::arg =  */ &smp_ol_fib_5_args}}};
            ::nanos_wd_dyn_props_t nanos_wd_dyn_props;
            nanos_wd_dyn_props.tie_to = 0;
            nanos_wd_dyn_props.priority = 0;
            nanos_wd_dyn_props.flags.is_final = 1;
            ::nanos_args_2_t *ol_args;
            ol_args = (::nanos_args_2_t *)0;
            ::nanos_args_2_t imm_args;
            ::nanos_wd_t nanos_wd_((void *)0);
            ::nanos_copy_data_t *ol_copy_data((::nanos_copy_data_t *)0);
            ::nanos_region_dimension_internal_t *ol_copy_dimensions((::nanos_region_dimension_internal_t *)0);
            ::nanos_err_t err;
            err = ::nanos_create_wd_compact(&nanos_wd_, &nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_2_t &), (void **)&ol_args, ::nanos_current_wd(), &ol_copy_data, &ol_copy_dimensions);
            if (err != ::NANOS_OK)
              {
                ::nanos_handle_error(err);
              }
            ::nanos_region_dimension_t dimensions_0[1] = { /* [0] =  */ { /* .::nanos_region_dimension_internal_t::size =  */ sizeof(int),  /* .::nanos_region_dimension_internal_t::lower_bound =  */ 0,  /* .::nanos_region_dimension_internal_t::accessed_length =  */ sizeof(int)}};
            ::nanos_data_access_t dependences[1] = { /* [0] =  */ { /* .::nanos_data_access_internal_t::address =  */ (void *)mcc_arg_9,  /* .::nanos_data_access_internal_t::flags =  */ { /* .::nanos_access_type_internal_t::input =  */ 0,  /* .::nanos_access_type_internal_t::output =  */ 1,  /* .::nanos_access_type_internal_t::can_rename =  */ 0,  /* .::nanos_access_type_internal_t::concurrent =  */ 0,  /* .::nanos_access_type_internal_t::commutative =  */ 0},  /* .::nanos_data_access_internal_t::dimension_count =  */ (short int)1,  /* .::nanos_data_access_internal_t::dimensions =  */ dimensions_0,  /* .::nanos_data_access_internal_t::offset =  */ 0}};
            ;
            if (nanos_wd_ != (void *)0)
              {
                (*ol_args).n = mcc_arg_8;
                (*ol_args).res = mcc_arg_9;
                ol_copy_dimensions[0].size = 1 * sizeof(int);
                ol_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                ol_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                ol_copy_data[0].sharing = ::NANOS_SHARED;
                ol_copy_data[0].address = (void *)mcc_arg_9;
                ol_copy_data[0].flags.input = 0;
                ol_copy_data[0].flags.output = 1;
                ol_copy_data[0].dimension_count = (short int)1;
                ol_copy_data[0].dimensions = &ol_copy_dimensions[0];
                ol_copy_data[0].offset = 0;
                err = ::nanos_set_translate_function(nanos_wd_, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_2);
                if (err != ::NANOS_OK)
                  {
                    ::nanos_handle_error(err);
                  }
                err = ::nanos_submit(nanos_wd_, 1, dependences, (void *)0);
                if (err != ::NANOS_OK)
                  {
                    ::nanos_handle_error(err);
                  }
              }
            else
              {
                imm_args.n = mcc_arg_8;
                imm_args.res = mcc_arg_9;
                ::nanos_copy_data_t imm_copy_data[1];
                ::nanos_region_dimension_internal_t imm_copy_dimensions[1];
                imm_copy_dimensions[0].size = 1 * sizeof(int);
                imm_copy_dimensions[0].lower_bound = 0 * sizeof(int);
                imm_copy_dimensions[0].accessed_length = (0 - 0 + 1) * sizeof(int);
                imm_copy_data[0].sharing = ::NANOS_SHARED;
                imm_copy_data[0].address = (void *)mcc_arg_9;
                imm_copy_data[0].flags.input = 0;
                imm_copy_data[0].flags.output = 1;
                imm_copy_data[0].dimension_count = (short int)1;
                imm_copy_data[0].dimensions = &imm_copy_dimensions[0];
                imm_copy_data[0].offset = 0;
                err = ::nanos_create_wd_and_run_compact(&nanos_wd_const_data.base, &nanos_wd_dyn_props, sizeof(::nanos_args_2_t &), &imm_args, 1, dependences, imm_copy_data, imm_copy_dimensions, (void (*)(void *, ::nanos_wd_t))::nanos_xlate_fun_fibompmemocpp_2);
                if (err != ::NANOS_OK)
                  {
                    ::nanos_handle_error(err);
                  }
              }
          }
        }
    }
  }
  {
    ::nanos_wd_t nanos_wd_(::nanos_current_wd());
    ::nanos_err_t err;
    err = ::nanos_wg_wait_completion(nanos_wd_, 0);
    if (err != ::NANOS_OK)
      {
        ::nanos_handle_error(err);
      }
  }
  double end(::omp_get_wtime());
  ::printf("fib(%d): %d, time, %f\n", n, res, end - start);
}
static void smp_ol_fib_1_unpacked(int n, int *res) throw()
{
  {
    {
      ::fib(n, res);
    }
  }
}
static void smp_ol_fib_1(::nanos_args_0_t &args) throw()
{
  {
    ::smp_ol_fib_1_unpacked(args.n, args.res);
  }
}
static void smp_ol_fib_3_unpacked(int n, int *res) throw()
{
  {
    {
      ::fib(n, res);
    }
  }
}
static void smp_ol_fib_3(::nanos_args_1_t &args) throw()
{
  {
    ::smp_ol_fib_3_unpacked(args.n, args.res);
  }
}
static void smp_ol_fib_5_unpacked(int n, int *res) throw()
{
  {
    {
      ::fib(n, res);
    }
  }
}
static void smp_ol_fib_5(::nanos_args_2_t &args) throw()
{
  {
    ::smp_ol_fib_5_unpacked(args.n, args.res);
  }
}
__attribute__((weak)) __attribute__((section("nanos_init"))) ::nanos_init_desc_t __section__nanos_init = { /* .::nanos_init_desc_t::func =  */ ::nanos_omp_set_interface,  /* .::nanos_init_desc_t::data =  */ (void *)0};
