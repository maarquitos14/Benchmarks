#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

int n;
int *dist;
FILE *input_file;

void read_graph(int *g) {
    int i,j;
    for(i=0;i<n;i++) {
        for(j=0;j<n;j++) {
            fscanf(input_file, "%d", &g[i*n+j]);
        }
    }
}

void write_graph(int *g) {
    int i,j;
    for(i=0;i<n;++i) {
        for(j=0;j<n;++j) {
            printf("%d ", g[i*n+j]);
        }
        printf("\n");
    }
}

void print_path(int *prev, int end) {
    printf("The path is: ");
    int aux = end;
    while(aux!=-1) {
        printf("%d ", aux);
        aux = prev[aux];
    }
    printf("\n"); 
}

int minDistance(int *dist, int *visited)
{
    // Initialize min value
    int min = INT_MAX, min_index = -1;

    for (int v = 0; v < n; v++)
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }

    return min_index;
}

void Dijkstra(int *g, int start, int end, int *res, int *visited) {
    int i;
    if(start == end) {
        *res = dist[start];
        return;
    }
    int u = minDistance(dist, visited);
    visited[u] = 1;
    int aux;
    int v;
    for(v=0;v<n;v++) {
        if(!visited[v] && g[u*n+v] && dist[u]!=INT_MAX && dist[u]+g[u*n+v] < dist[v]) {
            dist[v] = dist[u]+g[u*n+v];
        }
    }
    Dijkstra(g, u, end, &aux, visited);
    *res = aux;
}

int main(int argc, char *argv[]) {
    char *filename;
    int i,j;
    if(argc != 3) {
        printf("usage: %s filename size\n", argv[0]);
        exit(0);
    }
    else {
        n = atoi(argv[2]);
        filename = argv[1];
        input_file = fopen(filename, "r");
    }
    dist = (int *) malloc(n*sizeof(char));
    int * visited = (int *) malloc(n*sizeof(int));
    for(i=0;i<n;i++) {
        visited[i]=0;
        dist[i]=INT_MAX;
    }
    int g[n*n];
    read_graph(g);
    //write_graph(g);
    int start, end;
    fscanf(input_file, "%d %d", &start, &end);
    int res = INT_MAX;
    int prev[n];
    dist[start]=0;
    Dijkstra(g, start, end, &res, visited);
    printf("Distance from %d to %d is %d.\n", start, end, res);
    //print_path(prev, end);
}
